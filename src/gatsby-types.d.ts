/* eslint-disable */

/* prettier-ignore */

/* THIS FILE IS AUTOGENERATED. CHANGES WILL BE LOST ON SUBSEQUENT RUNS. */

declare namespace Queries {

type Maybe<T> = T | null;
type InputMaybe<T> = T | null;
type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
/** All built-in and custom scalars, mapped to their actual values */
type Scalars = {
  /** The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID. */
  ID: string;
  /** The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text. */
  String: string;
  /** The `Boolean` scalar type represents `true` or `false`. */
  Boolean: boolean;
  /** The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. */
  Int: number;
  /** The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](https://en.wikipedia.org/wiki/IEEE_floating_point). */
  Float: number;
  /** A date string, such as 2007-12-03, compliant with the ISO 8601 standard for representation of dates and times using the Gregorian calendar. */
  Date: string;
  /** The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf). */
  JSON: Record<string, unknown>;
};

type Airtable = Node & {
  readonly children: ReadonlyArray<Node>;
  readonly data: Maybe<AirtableData>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly parent: Maybe<Node>;
  readonly recordId: Maybe<Scalars['String']>;
  readonly rowIndex: Maybe<Scalars['Int']>;
  readonly table: Maybe<Scalars['String']>;
};

type AirtableConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<AirtableEdge>;
  readonly group: ReadonlyArray<AirtableGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<Airtable>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type AirtableConnection_distinctArgs = {
  field: AirtableFieldSelector;
};


type AirtableConnection_groupArgs = {
  field: AirtableFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type AirtableConnection_maxArgs = {
  field: AirtableFieldSelector;
};


type AirtableConnection_minArgs = {
  field: AirtableFieldSelector;
};


type AirtableConnection_sumArgs = {
  field: AirtableFieldSelector;
};

type AirtableData = {
  readonly Facebook: Maybe<Scalars['String']>;
  readonly Image: Maybe<Scalars['String']>;
  readonly Instagram: Maybe<Scalars['String']>;
  readonly Join_link: Maybe<Scalars['String']>;
  readonly Link: Maybe<Scalars['String']>;
  readonly Name: Maybe<Scalars['String']>;
  readonly Plan: Maybe<ReadonlyArray<Maybe<Scalars['String']>>>;
  readonly Slug: Maybe<Scalars['String']>;
  readonly Sort: Maybe<Scalars['Boolean']>;
  readonly Twitter: Maybe<Scalars['String']>;
  readonly Typeform_ID: Maybe<Scalars['String']>;
};

type AirtableDataFieldSelector = {
  readonly Facebook: InputMaybe<FieldSelectorEnum>;
  readonly Image: InputMaybe<FieldSelectorEnum>;
  readonly Instagram: InputMaybe<FieldSelectorEnum>;
  readonly Join_link: InputMaybe<FieldSelectorEnum>;
  readonly Link: InputMaybe<FieldSelectorEnum>;
  readonly Name: InputMaybe<FieldSelectorEnum>;
  readonly Plan: InputMaybe<FieldSelectorEnum>;
  readonly Slug: InputMaybe<FieldSelectorEnum>;
  readonly Sort: InputMaybe<FieldSelectorEnum>;
  readonly Twitter: InputMaybe<FieldSelectorEnum>;
  readonly Typeform_ID: InputMaybe<FieldSelectorEnum>;
};

type AirtableDataFilterInput = {
  readonly Facebook: InputMaybe<StringQueryOperatorInput>;
  readonly Image: InputMaybe<StringQueryOperatorInput>;
  readonly Instagram: InputMaybe<StringQueryOperatorInput>;
  readonly Join_link: InputMaybe<StringQueryOperatorInput>;
  readonly Link: InputMaybe<StringQueryOperatorInput>;
  readonly Name: InputMaybe<StringQueryOperatorInput>;
  readonly Plan: InputMaybe<StringQueryOperatorInput>;
  readonly Slug: InputMaybe<StringQueryOperatorInput>;
  readonly Sort: InputMaybe<BooleanQueryOperatorInput>;
  readonly Twitter: InputMaybe<StringQueryOperatorInput>;
  readonly Typeform_ID: InputMaybe<StringQueryOperatorInput>;
};

type AirtableDataSortInput = {
  readonly Facebook: InputMaybe<SortOrderEnum>;
  readonly Image: InputMaybe<SortOrderEnum>;
  readonly Instagram: InputMaybe<SortOrderEnum>;
  readonly Join_link: InputMaybe<SortOrderEnum>;
  readonly Link: InputMaybe<SortOrderEnum>;
  readonly Name: InputMaybe<SortOrderEnum>;
  readonly Plan: InputMaybe<SortOrderEnum>;
  readonly Slug: InputMaybe<SortOrderEnum>;
  readonly Sort: InputMaybe<SortOrderEnum>;
  readonly Twitter: InputMaybe<SortOrderEnum>;
  readonly Typeform_ID: InputMaybe<SortOrderEnum>;
};

type AirtableEdge = {
  readonly next: Maybe<Airtable>;
  readonly node: Airtable;
  readonly previous: Maybe<Airtable>;
};

type AirtableFieldSelector = {
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly data: InputMaybe<AirtableDataFieldSelector>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly recordId: InputMaybe<FieldSelectorEnum>;
  readonly rowIndex: InputMaybe<FieldSelectorEnum>;
  readonly table: InputMaybe<FieldSelectorEnum>;
};

type AirtableFilterInput = {
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly data: InputMaybe<AirtableDataFilterInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly recordId: InputMaybe<StringQueryOperatorInput>;
  readonly rowIndex: InputMaybe<IntQueryOperatorInput>;
  readonly table: InputMaybe<StringQueryOperatorInput>;
};

type AirtableGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<AirtableEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<AirtableGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<Airtable>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type AirtableGroupConnection_distinctArgs = {
  field: AirtableFieldSelector;
};


type AirtableGroupConnection_groupArgs = {
  field: AirtableFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type AirtableGroupConnection_maxArgs = {
  field: AirtableFieldSelector;
};


type AirtableGroupConnection_minArgs = {
  field: AirtableFieldSelector;
};


type AirtableGroupConnection_sumArgs = {
  field: AirtableFieldSelector;
};

type AirtableSortInput = {
  readonly children: InputMaybe<NodeSortInput>;
  readonly data: InputMaybe<AirtableDataSortInput>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly recordId: InputMaybe<SortOrderEnum>;
  readonly rowIndex: InputMaybe<SortOrderEnum>;
  readonly table: InputMaybe<SortOrderEnum>;
};

type BooleanQueryOperatorInput = {
  readonly eq: InputMaybe<Scalars['Boolean']>;
  readonly in: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Boolean']>>>;
  readonly ne: InputMaybe<Scalars['Boolean']>;
  readonly nin: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Boolean']>>>;
};

type DateQueryOperatorInput = {
  readonly eq: InputMaybe<Scalars['Date']>;
  readonly gt: InputMaybe<Scalars['Date']>;
  readonly gte: InputMaybe<Scalars['Date']>;
  readonly in: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Date']>>>;
  readonly lt: InputMaybe<Scalars['Date']>;
  readonly lte: InputMaybe<Scalars['Date']>;
  readonly ne: InputMaybe<Scalars['Date']>;
  readonly nin: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Date']>>>;
};

type Directory = Node & {
  readonly absolutePath: Scalars['String'];
  readonly accessTime: Scalars['Date'];
  readonly atime: Scalars['Date'];
  readonly atimeMs: Scalars['Float'];
  readonly base: Scalars['String'];
  readonly birthTime: Scalars['Date'];
  /** @deprecated Use `birthTime` instead */
  readonly birthtime: Maybe<Scalars['Date']>;
  /** @deprecated Use `birthTime` instead */
  readonly birthtimeMs: Maybe<Scalars['Float']>;
  readonly changeTime: Scalars['Date'];
  readonly children: ReadonlyArray<Node>;
  readonly ctime: Scalars['Date'];
  readonly ctimeMs: Scalars['Float'];
  readonly dev: Scalars['Int'];
  readonly dir: Scalars['String'];
  readonly ext: Scalars['String'];
  readonly extension: Scalars['String'];
  readonly gid: Scalars['Int'];
  readonly id: Scalars['ID'];
  readonly ino: Scalars['Float'];
  readonly internal: Internal;
  readonly mode: Scalars['Int'];
  readonly modifiedTime: Scalars['Date'];
  readonly mtime: Scalars['Date'];
  readonly mtimeMs: Scalars['Float'];
  readonly name: Scalars['String'];
  readonly nlink: Scalars['Int'];
  readonly parent: Maybe<Node>;
  readonly prettySize: Scalars['String'];
  readonly rdev: Scalars['Int'];
  readonly relativeDirectory: Scalars['String'];
  readonly relativePath: Scalars['String'];
  readonly root: Scalars['String'];
  readonly size: Scalars['Int'];
  readonly sourceInstanceName: Scalars['String'];
  readonly uid: Scalars['Int'];
};


type Directory_accessTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type Directory_atimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type Directory_birthTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type Directory_changeTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type Directory_ctimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type Directory_modifiedTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type Directory_mtimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type DirectoryConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<DirectoryEdge>;
  readonly group: ReadonlyArray<DirectoryGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<Directory>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type DirectoryConnection_distinctArgs = {
  field: DirectoryFieldSelector;
};


type DirectoryConnection_groupArgs = {
  field: DirectoryFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type DirectoryConnection_maxArgs = {
  field: DirectoryFieldSelector;
};


type DirectoryConnection_minArgs = {
  field: DirectoryFieldSelector;
};


type DirectoryConnection_sumArgs = {
  field: DirectoryFieldSelector;
};

type DirectoryEdge = {
  readonly next: Maybe<Directory>;
  readonly node: Directory;
  readonly previous: Maybe<Directory>;
};

type DirectoryFieldSelector = {
  readonly absolutePath: InputMaybe<FieldSelectorEnum>;
  readonly accessTime: InputMaybe<FieldSelectorEnum>;
  readonly atime: InputMaybe<FieldSelectorEnum>;
  readonly atimeMs: InputMaybe<FieldSelectorEnum>;
  readonly base: InputMaybe<FieldSelectorEnum>;
  readonly birthTime: InputMaybe<FieldSelectorEnum>;
  readonly birthtime: InputMaybe<FieldSelectorEnum>;
  readonly birthtimeMs: InputMaybe<FieldSelectorEnum>;
  readonly changeTime: InputMaybe<FieldSelectorEnum>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly ctime: InputMaybe<FieldSelectorEnum>;
  readonly ctimeMs: InputMaybe<FieldSelectorEnum>;
  readonly dev: InputMaybe<FieldSelectorEnum>;
  readonly dir: InputMaybe<FieldSelectorEnum>;
  readonly ext: InputMaybe<FieldSelectorEnum>;
  readonly extension: InputMaybe<FieldSelectorEnum>;
  readonly gid: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly ino: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly mode: InputMaybe<FieldSelectorEnum>;
  readonly modifiedTime: InputMaybe<FieldSelectorEnum>;
  readonly mtime: InputMaybe<FieldSelectorEnum>;
  readonly mtimeMs: InputMaybe<FieldSelectorEnum>;
  readonly name: InputMaybe<FieldSelectorEnum>;
  readonly nlink: InputMaybe<FieldSelectorEnum>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly prettySize: InputMaybe<FieldSelectorEnum>;
  readonly rdev: InputMaybe<FieldSelectorEnum>;
  readonly relativeDirectory: InputMaybe<FieldSelectorEnum>;
  readonly relativePath: InputMaybe<FieldSelectorEnum>;
  readonly root: InputMaybe<FieldSelectorEnum>;
  readonly size: InputMaybe<FieldSelectorEnum>;
  readonly sourceInstanceName: InputMaybe<FieldSelectorEnum>;
  readonly uid: InputMaybe<FieldSelectorEnum>;
};

type DirectoryFilterInput = {
  readonly absolutePath: InputMaybe<StringQueryOperatorInput>;
  readonly accessTime: InputMaybe<DateQueryOperatorInput>;
  readonly atime: InputMaybe<DateQueryOperatorInput>;
  readonly atimeMs: InputMaybe<FloatQueryOperatorInput>;
  readonly base: InputMaybe<StringQueryOperatorInput>;
  readonly birthTime: InputMaybe<DateQueryOperatorInput>;
  readonly birthtime: InputMaybe<DateQueryOperatorInput>;
  readonly birthtimeMs: InputMaybe<FloatQueryOperatorInput>;
  readonly changeTime: InputMaybe<DateQueryOperatorInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly ctime: InputMaybe<DateQueryOperatorInput>;
  readonly ctimeMs: InputMaybe<FloatQueryOperatorInput>;
  readonly dev: InputMaybe<IntQueryOperatorInput>;
  readonly dir: InputMaybe<StringQueryOperatorInput>;
  readonly ext: InputMaybe<StringQueryOperatorInput>;
  readonly extension: InputMaybe<StringQueryOperatorInput>;
  readonly gid: InputMaybe<IntQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly ino: InputMaybe<FloatQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly mode: InputMaybe<IntQueryOperatorInput>;
  readonly modifiedTime: InputMaybe<DateQueryOperatorInput>;
  readonly mtime: InputMaybe<DateQueryOperatorInput>;
  readonly mtimeMs: InputMaybe<FloatQueryOperatorInput>;
  readonly name: InputMaybe<StringQueryOperatorInput>;
  readonly nlink: InputMaybe<IntQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly prettySize: InputMaybe<StringQueryOperatorInput>;
  readonly rdev: InputMaybe<IntQueryOperatorInput>;
  readonly relativeDirectory: InputMaybe<StringQueryOperatorInput>;
  readonly relativePath: InputMaybe<StringQueryOperatorInput>;
  readonly root: InputMaybe<StringQueryOperatorInput>;
  readonly size: InputMaybe<IntQueryOperatorInput>;
  readonly sourceInstanceName: InputMaybe<StringQueryOperatorInput>;
  readonly uid: InputMaybe<IntQueryOperatorInput>;
};

type DirectoryGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<DirectoryEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<DirectoryGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<Directory>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type DirectoryGroupConnection_distinctArgs = {
  field: DirectoryFieldSelector;
};


type DirectoryGroupConnection_groupArgs = {
  field: DirectoryFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type DirectoryGroupConnection_maxArgs = {
  field: DirectoryFieldSelector;
};


type DirectoryGroupConnection_minArgs = {
  field: DirectoryFieldSelector;
};


type DirectoryGroupConnection_sumArgs = {
  field: DirectoryFieldSelector;
};

type DirectorySortInput = {
  readonly absolutePath: InputMaybe<SortOrderEnum>;
  readonly accessTime: InputMaybe<SortOrderEnum>;
  readonly atime: InputMaybe<SortOrderEnum>;
  readonly atimeMs: InputMaybe<SortOrderEnum>;
  readonly base: InputMaybe<SortOrderEnum>;
  readonly birthTime: InputMaybe<SortOrderEnum>;
  readonly birthtime: InputMaybe<SortOrderEnum>;
  readonly birthtimeMs: InputMaybe<SortOrderEnum>;
  readonly changeTime: InputMaybe<SortOrderEnum>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly ctime: InputMaybe<SortOrderEnum>;
  readonly ctimeMs: InputMaybe<SortOrderEnum>;
  readonly dev: InputMaybe<SortOrderEnum>;
  readonly dir: InputMaybe<SortOrderEnum>;
  readonly ext: InputMaybe<SortOrderEnum>;
  readonly extension: InputMaybe<SortOrderEnum>;
  readonly gid: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly ino: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly mode: InputMaybe<SortOrderEnum>;
  readonly modifiedTime: InputMaybe<SortOrderEnum>;
  readonly mtime: InputMaybe<SortOrderEnum>;
  readonly mtimeMs: InputMaybe<SortOrderEnum>;
  readonly name: InputMaybe<SortOrderEnum>;
  readonly nlink: InputMaybe<SortOrderEnum>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly prettySize: InputMaybe<SortOrderEnum>;
  readonly rdev: InputMaybe<SortOrderEnum>;
  readonly relativeDirectory: InputMaybe<SortOrderEnum>;
  readonly relativePath: InputMaybe<SortOrderEnum>;
  readonly root: InputMaybe<SortOrderEnum>;
  readonly size: InputMaybe<SortOrderEnum>;
  readonly sourceInstanceName: InputMaybe<SortOrderEnum>;
  readonly uid: InputMaybe<SortOrderEnum>;
};

type FieldSelectorEnum =
  | 'SELECT';

type File = Node & {
  readonly absolutePath: Scalars['String'];
  readonly accessTime: Scalars['Date'];
  readonly atime: Scalars['Date'];
  readonly atimeMs: Scalars['Float'];
  readonly base: Scalars['String'];
  readonly birthTime: Scalars['Date'];
  /** @deprecated Use `birthTime` instead */
  readonly birthtime: Maybe<Scalars['Date']>;
  /** @deprecated Use `birthTime` instead */
  readonly birthtimeMs: Maybe<Scalars['Float']>;
  readonly changeTime: Scalars['Date'];
  readonly children: ReadonlyArray<Node>;
  readonly ctime: Scalars['Date'];
  readonly ctimeMs: Scalars['Float'];
  readonly dev: Scalars['Int'];
  readonly dir: Scalars['String'];
  readonly ext: Scalars['String'];
  readonly extension: Scalars['String'];
  readonly gid: Scalars['Int'];
  readonly id: Scalars['ID'];
  readonly ino: Scalars['Float'];
  readonly internal: Internal;
  readonly mode: Scalars['Int'];
  readonly modifiedTime: Scalars['Date'];
  readonly mtime: Scalars['Date'];
  readonly mtimeMs: Scalars['Float'];
  readonly name: Scalars['String'];
  readonly nlink: Scalars['Int'];
  readonly parent: Maybe<Node>;
  readonly prettySize: Scalars['String'];
  readonly rdev: Scalars['Int'];
  readonly relativeDirectory: Scalars['String'];
  readonly relativePath: Scalars['String'];
  readonly root: Scalars['String'];
  readonly size: Scalars['Int'];
  readonly sourceInstanceName: Scalars['String'];
  readonly uid: Scalars['Int'];
};


type File_accessTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type File_atimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type File_birthTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type File_changeTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type File_ctimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type File_modifiedTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type File_mtimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type FileConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<FileEdge>;
  readonly group: ReadonlyArray<FileGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<File>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type FileConnection_distinctArgs = {
  field: FileFieldSelector;
};


type FileConnection_groupArgs = {
  field: FileFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type FileConnection_maxArgs = {
  field: FileFieldSelector;
};


type FileConnection_minArgs = {
  field: FileFieldSelector;
};


type FileConnection_sumArgs = {
  field: FileFieldSelector;
};

type FileEdge = {
  readonly next: Maybe<File>;
  readonly node: File;
  readonly previous: Maybe<File>;
};

type FileFieldSelector = {
  readonly absolutePath: InputMaybe<FieldSelectorEnum>;
  readonly accessTime: InputMaybe<FieldSelectorEnum>;
  readonly atime: InputMaybe<FieldSelectorEnum>;
  readonly atimeMs: InputMaybe<FieldSelectorEnum>;
  readonly base: InputMaybe<FieldSelectorEnum>;
  readonly birthTime: InputMaybe<FieldSelectorEnum>;
  readonly birthtime: InputMaybe<FieldSelectorEnum>;
  readonly birthtimeMs: InputMaybe<FieldSelectorEnum>;
  readonly changeTime: InputMaybe<FieldSelectorEnum>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly ctime: InputMaybe<FieldSelectorEnum>;
  readonly ctimeMs: InputMaybe<FieldSelectorEnum>;
  readonly dev: InputMaybe<FieldSelectorEnum>;
  readonly dir: InputMaybe<FieldSelectorEnum>;
  readonly ext: InputMaybe<FieldSelectorEnum>;
  readonly extension: InputMaybe<FieldSelectorEnum>;
  readonly gid: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly ino: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly mode: InputMaybe<FieldSelectorEnum>;
  readonly modifiedTime: InputMaybe<FieldSelectorEnum>;
  readonly mtime: InputMaybe<FieldSelectorEnum>;
  readonly mtimeMs: InputMaybe<FieldSelectorEnum>;
  readonly name: InputMaybe<FieldSelectorEnum>;
  readonly nlink: InputMaybe<FieldSelectorEnum>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly prettySize: InputMaybe<FieldSelectorEnum>;
  readonly rdev: InputMaybe<FieldSelectorEnum>;
  readonly relativeDirectory: InputMaybe<FieldSelectorEnum>;
  readonly relativePath: InputMaybe<FieldSelectorEnum>;
  readonly root: InputMaybe<FieldSelectorEnum>;
  readonly size: InputMaybe<FieldSelectorEnum>;
  readonly sourceInstanceName: InputMaybe<FieldSelectorEnum>;
  readonly uid: InputMaybe<FieldSelectorEnum>;
};

type FileFilterInput = {
  readonly absolutePath: InputMaybe<StringQueryOperatorInput>;
  readonly accessTime: InputMaybe<DateQueryOperatorInput>;
  readonly atime: InputMaybe<DateQueryOperatorInput>;
  readonly atimeMs: InputMaybe<FloatQueryOperatorInput>;
  readonly base: InputMaybe<StringQueryOperatorInput>;
  readonly birthTime: InputMaybe<DateQueryOperatorInput>;
  readonly birthtime: InputMaybe<DateQueryOperatorInput>;
  readonly birthtimeMs: InputMaybe<FloatQueryOperatorInput>;
  readonly changeTime: InputMaybe<DateQueryOperatorInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly ctime: InputMaybe<DateQueryOperatorInput>;
  readonly ctimeMs: InputMaybe<FloatQueryOperatorInput>;
  readonly dev: InputMaybe<IntQueryOperatorInput>;
  readonly dir: InputMaybe<StringQueryOperatorInput>;
  readonly ext: InputMaybe<StringQueryOperatorInput>;
  readonly extension: InputMaybe<StringQueryOperatorInput>;
  readonly gid: InputMaybe<IntQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly ino: InputMaybe<FloatQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly mode: InputMaybe<IntQueryOperatorInput>;
  readonly modifiedTime: InputMaybe<DateQueryOperatorInput>;
  readonly mtime: InputMaybe<DateQueryOperatorInput>;
  readonly mtimeMs: InputMaybe<FloatQueryOperatorInput>;
  readonly name: InputMaybe<StringQueryOperatorInput>;
  readonly nlink: InputMaybe<IntQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly prettySize: InputMaybe<StringQueryOperatorInput>;
  readonly rdev: InputMaybe<IntQueryOperatorInput>;
  readonly relativeDirectory: InputMaybe<StringQueryOperatorInput>;
  readonly relativePath: InputMaybe<StringQueryOperatorInput>;
  readonly root: InputMaybe<StringQueryOperatorInput>;
  readonly size: InputMaybe<IntQueryOperatorInput>;
  readonly sourceInstanceName: InputMaybe<StringQueryOperatorInput>;
  readonly uid: InputMaybe<IntQueryOperatorInput>;
};

type FileGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<FileEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<FileGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<File>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type FileGroupConnection_distinctArgs = {
  field: FileFieldSelector;
};


type FileGroupConnection_groupArgs = {
  field: FileFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type FileGroupConnection_maxArgs = {
  field: FileFieldSelector;
};


type FileGroupConnection_minArgs = {
  field: FileFieldSelector;
};


type FileGroupConnection_sumArgs = {
  field: FileFieldSelector;
};

type FileSortInput = {
  readonly absolutePath: InputMaybe<SortOrderEnum>;
  readonly accessTime: InputMaybe<SortOrderEnum>;
  readonly atime: InputMaybe<SortOrderEnum>;
  readonly atimeMs: InputMaybe<SortOrderEnum>;
  readonly base: InputMaybe<SortOrderEnum>;
  readonly birthTime: InputMaybe<SortOrderEnum>;
  readonly birthtime: InputMaybe<SortOrderEnum>;
  readonly birthtimeMs: InputMaybe<SortOrderEnum>;
  readonly changeTime: InputMaybe<SortOrderEnum>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly ctime: InputMaybe<SortOrderEnum>;
  readonly ctimeMs: InputMaybe<SortOrderEnum>;
  readonly dev: InputMaybe<SortOrderEnum>;
  readonly dir: InputMaybe<SortOrderEnum>;
  readonly ext: InputMaybe<SortOrderEnum>;
  readonly extension: InputMaybe<SortOrderEnum>;
  readonly gid: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly ino: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly mode: InputMaybe<SortOrderEnum>;
  readonly modifiedTime: InputMaybe<SortOrderEnum>;
  readonly mtime: InputMaybe<SortOrderEnum>;
  readonly mtimeMs: InputMaybe<SortOrderEnum>;
  readonly name: InputMaybe<SortOrderEnum>;
  readonly nlink: InputMaybe<SortOrderEnum>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly prettySize: InputMaybe<SortOrderEnum>;
  readonly rdev: InputMaybe<SortOrderEnum>;
  readonly relativeDirectory: InputMaybe<SortOrderEnum>;
  readonly relativePath: InputMaybe<SortOrderEnum>;
  readonly root: InputMaybe<SortOrderEnum>;
  readonly size: InputMaybe<SortOrderEnum>;
  readonly sourceInstanceName: InputMaybe<SortOrderEnum>;
  readonly uid: InputMaybe<SortOrderEnum>;
};

type FloatQueryOperatorInput = {
  readonly eq: InputMaybe<Scalars['Float']>;
  readonly gt: InputMaybe<Scalars['Float']>;
  readonly gte: InputMaybe<Scalars['Float']>;
  readonly in: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Float']>>>;
  readonly lt: InputMaybe<Scalars['Float']>;
  readonly lte: InputMaybe<Scalars['Float']>;
  readonly ne: InputMaybe<Scalars['Float']>;
  readonly nin: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Float']>>>;
};

type GhostAuthor = Node & {
  readonly bio: Maybe<Scalars['String']>;
  readonly children: ReadonlyArray<Node>;
  readonly count: GhostPostCount;
  readonly cover_image: Maybe<Scalars['String']>;
  readonly facebook: Maybe<Scalars['String']>;
  readonly ghostId: Maybe<Scalars['String']>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly location: Maybe<Scalars['String']>;
  readonly meta_description: Maybe<Scalars['String']>;
  readonly meta_title: Maybe<Scalars['String']>;
  readonly name: Scalars['String'];
  readonly parent: Maybe<Node>;
  readonly postCount: Scalars['Int'];
  readonly profile_image: Maybe<Scalars['String']>;
  readonly slug: Scalars['String'];
  readonly twitter: Maybe<Scalars['String']>;
  readonly url: Scalars['String'];
  readonly website: Maybe<Scalars['String']>;
};

type GhostAuthorConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<GhostAuthorEdge>;
  readonly group: ReadonlyArray<GhostAuthorGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<GhostAuthor>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type GhostAuthorConnection_distinctArgs = {
  field: GhostAuthorFieldSelector;
};


type GhostAuthorConnection_groupArgs = {
  field: GhostAuthorFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type GhostAuthorConnection_maxArgs = {
  field: GhostAuthorFieldSelector;
};


type GhostAuthorConnection_minArgs = {
  field: GhostAuthorFieldSelector;
};


type GhostAuthorConnection_sumArgs = {
  field: GhostAuthorFieldSelector;
};

type GhostAuthorEdge = {
  readonly next: Maybe<GhostAuthor>;
  readonly node: GhostAuthor;
  readonly previous: Maybe<GhostAuthor>;
};

type GhostAuthorFieldSelector = {
  readonly bio: InputMaybe<FieldSelectorEnum>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly count: InputMaybe<GhostPostCountFieldSelector>;
  readonly cover_image: InputMaybe<FieldSelectorEnum>;
  readonly facebook: InputMaybe<FieldSelectorEnum>;
  readonly ghostId: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly location: InputMaybe<FieldSelectorEnum>;
  readonly meta_description: InputMaybe<FieldSelectorEnum>;
  readonly meta_title: InputMaybe<FieldSelectorEnum>;
  readonly name: InputMaybe<FieldSelectorEnum>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly postCount: InputMaybe<FieldSelectorEnum>;
  readonly profile_image: InputMaybe<FieldSelectorEnum>;
  readonly slug: InputMaybe<FieldSelectorEnum>;
  readonly twitter: InputMaybe<FieldSelectorEnum>;
  readonly url: InputMaybe<FieldSelectorEnum>;
  readonly website: InputMaybe<FieldSelectorEnum>;
};

type GhostAuthorFilterInput = {
  readonly bio: InputMaybe<StringQueryOperatorInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly count: InputMaybe<GhostPostCountFilterInput>;
  readonly cover_image: InputMaybe<StringQueryOperatorInput>;
  readonly facebook: InputMaybe<StringQueryOperatorInput>;
  readonly ghostId: InputMaybe<StringQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly location: InputMaybe<StringQueryOperatorInput>;
  readonly meta_description: InputMaybe<StringQueryOperatorInput>;
  readonly meta_title: InputMaybe<StringQueryOperatorInput>;
  readonly name: InputMaybe<StringQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly postCount: InputMaybe<IntQueryOperatorInput>;
  readonly profile_image: InputMaybe<StringQueryOperatorInput>;
  readonly slug: InputMaybe<StringQueryOperatorInput>;
  readonly twitter: InputMaybe<StringQueryOperatorInput>;
  readonly url: InputMaybe<StringQueryOperatorInput>;
  readonly website: InputMaybe<StringQueryOperatorInput>;
};

type GhostAuthorFilterListInput = {
  readonly elemMatch: InputMaybe<GhostAuthorFilterInput>;
};

type GhostAuthorGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<GhostAuthorEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<GhostAuthorGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<GhostAuthor>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type GhostAuthorGroupConnection_distinctArgs = {
  field: GhostAuthorFieldSelector;
};


type GhostAuthorGroupConnection_groupArgs = {
  field: GhostAuthorFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type GhostAuthorGroupConnection_maxArgs = {
  field: GhostAuthorFieldSelector;
};


type GhostAuthorGroupConnection_minArgs = {
  field: GhostAuthorFieldSelector;
};


type GhostAuthorGroupConnection_sumArgs = {
  field: GhostAuthorFieldSelector;
};

type GhostAuthorSortInput = {
  readonly bio: InputMaybe<SortOrderEnum>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly count: InputMaybe<GhostPostCountSortInput>;
  readonly cover_image: InputMaybe<SortOrderEnum>;
  readonly facebook: InputMaybe<SortOrderEnum>;
  readonly ghostId: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly location: InputMaybe<SortOrderEnum>;
  readonly meta_description: InputMaybe<SortOrderEnum>;
  readonly meta_title: InputMaybe<SortOrderEnum>;
  readonly name: InputMaybe<SortOrderEnum>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly postCount: InputMaybe<SortOrderEnum>;
  readonly profile_image: InputMaybe<SortOrderEnum>;
  readonly slug: InputMaybe<SortOrderEnum>;
  readonly twitter: InputMaybe<SortOrderEnum>;
  readonly url: InputMaybe<SortOrderEnum>;
  readonly website: InputMaybe<SortOrderEnum>;
};

type GhostNavigation = {
  readonly label: Scalars['String'];
  readonly url: Scalars['String'];
};

type GhostNavigationFieldSelector = {
  readonly label: InputMaybe<FieldSelectorEnum>;
  readonly url: InputMaybe<FieldSelectorEnum>;
};

type GhostNavigationFilterInput = {
  readonly label: InputMaybe<StringQueryOperatorInput>;
  readonly url: InputMaybe<StringQueryOperatorInput>;
};

type GhostNavigationFilterListInput = {
  readonly elemMatch: InputMaybe<GhostNavigationFilterInput>;
};

type GhostNavigationSortInput = {
  readonly label: InputMaybe<SortOrderEnum>;
  readonly url: InputMaybe<SortOrderEnum>;
};

type GhostPage = Node & {
  readonly access: Maybe<Scalars['Boolean']>;
  readonly authors: ReadonlyArray<Maybe<GhostAuthor>>;
  readonly canonical_url: Maybe<Scalars['String']>;
  readonly children: ReadonlyArray<Node>;
  readonly codeinjection_foot: Maybe<Scalars['String']>;
  readonly codeinjection_head: Maybe<Scalars['String']>;
  readonly codeinjection_styles: Maybe<Scalars['String']>;
  readonly comment_id: Maybe<Scalars['String']>;
  readonly created_at: Scalars['Date'];
  readonly custom_excerpt: Maybe<Scalars['String']>;
  readonly custom_template: Maybe<Scalars['String']>;
  readonly email_subject: Maybe<Scalars['String']>;
  readonly excerpt: Maybe<Scalars['String']>;
  readonly feature_image: Maybe<Scalars['String']>;
  readonly featured: Scalars['Boolean'];
  readonly ghostId: Maybe<Scalars['String']>;
  readonly html: Maybe<Scalars['String']>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly meta_description: Maybe<Scalars['String']>;
  readonly meta_title: Maybe<Scalars['String']>;
  readonly og_description: Maybe<Scalars['String']>;
  readonly og_image: Maybe<Scalars['String']>;
  readonly og_title: Maybe<Scalars['String']>;
  readonly page: Maybe<Scalars['Boolean']>;
  readonly parent: Maybe<Node>;
  readonly plaintext: Maybe<Scalars['String']>;
  readonly primary_author: GhostAuthor;
  readonly primary_tag: Maybe<GhostTag>;
  readonly published_at: Maybe<Scalars['Date']>;
  readonly reading_time: Maybe<Scalars['Int']>;
  readonly send_email_when_published: Maybe<Scalars['Boolean']>;
  readonly slug: Scalars['String'];
  readonly tags: Maybe<ReadonlyArray<Maybe<GhostTag>>>;
  readonly title: Scalars['String'];
  readonly twitter_description: Maybe<Scalars['String']>;
  readonly twitter_image: Maybe<Scalars['String']>;
  readonly twitter_title: Maybe<Scalars['String']>;
  readonly updated_at: Maybe<Scalars['Date']>;
  readonly url: Scalars['String'];
  readonly uuid: Scalars['String'];
  readonly visibility: Scalars['String'];
};


type GhostPage_created_atArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type GhostPage_published_atArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type GhostPage_updated_atArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type GhostPageConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<GhostPageEdge>;
  readonly group: ReadonlyArray<GhostPageGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<GhostPage>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type GhostPageConnection_distinctArgs = {
  field: GhostPageFieldSelector;
};


type GhostPageConnection_groupArgs = {
  field: GhostPageFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type GhostPageConnection_maxArgs = {
  field: GhostPageFieldSelector;
};


type GhostPageConnection_minArgs = {
  field: GhostPageFieldSelector;
};


type GhostPageConnection_sumArgs = {
  field: GhostPageFieldSelector;
};

type GhostPageEdge = {
  readonly next: Maybe<GhostPage>;
  readonly node: GhostPage;
  readonly previous: Maybe<GhostPage>;
};

type GhostPageFieldSelector = {
  readonly access: InputMaybe<FieldSelectorEnum>;
  readonly authors: InputMaybe<GhostAuthorFieldSelector>;
  readonly canonical_url: InputMaybe<FieldSelectorEnum>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly codeinjection_foot: InputMaybe<FieldSelectorEnum>;
  readonly codeinjection_head: InputMaybe<FieldSelectorEnum>;
  readonly codeinjection_styles: InputMaybe<FieldSelectorEnum>;
  readonly comment_id: InputMaybe<FieldSelectorEnum>;
  readonly created_at: InputMaybe<FieldSelectorEnum>;
  readonly custom_excerpt: InputMaybe<FieldSelectorEnum>;
  readonly custom_template: InputMaybe<FieldSelectorEnum>;
  readonly email_subject: InputMaybe<FieldSelectorEnum>;
  readonly excerpt: InputMaybe<FieldSelectorEnum>;
  readonly feature_image: InputMaybe<FieldSelectorEnum>;
  readonly featured: InputMaybe<FieldSelectorEnum>;
  readonly ghostId: InputMaybe<FieldSelectorEnum>;
  readonly html: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly meta_description: InputMaybe<FieldSelectorEnum>;
  readonly meta_title: InputMaybe<FieldSelectorEnum>;
  readonly og_description: InputMaybe<FieldSelectorEnum>;
  readonly og_image: InputMaybe<FieldSelectorEnum>;
  readonly og_title: InputMaybe<FieldSelectorEnum>;
  readonly page: InputMaybe<FieldSelectorEnum>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly plaintext: InputMaybe<FieldSelectorEnum>;
  readonly primary_author: InputMaybe<GhostAuthorFieldSelector>;
  readonly primary_tag: InputMaybe<GhostTagFieldSelector>;
  readonly published_at: InputMaybe<FieldSelectorEnum>;
  readonly reading_time: InputMaybe<FieldSelectorEnum>;
  readonly send_email_when_published: InputMaybe<FieldSelectorEnum>;
  readonly slug: InputMaybe<FieldSelectorEnum>;
  readonly tags: InputMaybe<GhostTagFieldSelector>;
  readonly title: InputMaybe<FieldSelectorEnum>;
  readonly twitter_description: InputMaybe<FieldSelectorEnum>;
  readonly twitter_image: InputMaybe<FieldSelectorEnum>;
  readonly twitter_title: InputMaybe<FieldSelectorEnum>;
  readonly updated_at: InputMaybe<FieldSelectorEnum>;
  readonly url: InputMaybe<FieldSelectorEnum>;
  readonly uuid: InputMaybe<FieldSelectorEnum>;
  readonly visibility: InputMaybe<FieldSelectorEnum>;
};

type GhostPageFilterInput = {
  readonly access: InputMaybe<BooleanQueryOperatorInput>;
  readonly authors: InputMaybe<GhostAuthorFilterListInput>;
  readonly canonical_url: InputMaybe<StringQueryOperatorInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly codeinjection_foot: InputMaybe<StringQueryOperatorInput>;
  readonly codeinjection_head: InputMaybe<StringQueryOperatorInput>;
  readonly codeinjection_styles: InputMaybe<StringQueryOperatorInput>;
  readonly comment_id: InputMaybe<StringQueryOperatorInput>;
  readonly created_at: InputMaybe<DateQueryOperatorInput>;
  readonly custom_excerpt: InputMaybe<StringQueryOperatorInput>;
  readonly custom_template: InputMaybe<StringQueryOperatorInput>;
  readonly email_subject: InputMaybe<StringQueryOperatorInput>;
  readonly excerpt: InputMaybe<StringQueryOperatorInput>;
  readonly feature_image: InputMaybe<StringQueryOperatorInput>;
  readonly featured: InputMaybe<BooleanQueryOperatorInput>;
  readonly ghostId: InputMaybe<StringQueryOperatorInput>;
  readonly html: InputMaybe<StringQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly meta_description: InputMaybe<StringQueryOperatorInput>;
  readonly meta_title: InputMaybe<StringQueryOperatorInput>;
  readonly og_description: InputMaybe<StringQueryOperatorInput>;
  readonly og_image: InputMaybe<StringQueryOperatorInput>;
  readonly og_title: InputMaybe<StringQueryOperatorInput>;
  readonly page: InputMaybe<BooleanQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly plaintext: InputMaybe<StringQueryOperatorInput>;
  readonly primary_author: InputMaybe<GhostAuthorFilterInput>;
  readonly primary_tag: InputMaybe<GhostTagFilterInput>;
  readonly published_at: InputMaybe<DateQueryOperatorInput>;
  readonly reading_time: InputMaybe<IntQueryOperatorInput>;
  readonly send_email_when_published: InputMaybe<BooleanQueryOperatorInput>;
  readonly slug: InputMaybe<StringQueryOperatorInput>;
  readonly tags: InputMaybe<GhostTagFilterListInput>;
  readonly title: InputMaybe<StringQueryOperatorInput>;
  readonly twitter_description: InputMaybe<StringQueryOperatorInput>;
  readonly twitter_image: InputMaybe<StringQueryOperatorInput>;
  readonly twitter_title: InputMaybe<StringQueryOperatorInput>;
  readonly updated_at: InputMaybe<DateQueryOperatorInput>;
  readonly url: InputMaybe<StringQueryOperatorInput>;
  readonly uuid: InputMaybe<StringQueryOperatorInput>;
  readonly visibility: InputMaybe<StringQueryOperatorInput>;
};

type GhostPageGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<GhostPageEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<GhostPageGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<GhostPage>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type GhostPageGroupConnection_distinctArgs = {
  field: GhostPageFieldSelector;
};


type GhostPageGroupConnection_groupArgs = {
  field: GhostPageFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type GhostPageGroupConnection_maxArgs = {
  field: GhostPageFieldSelector;
};


type GhostPageGroupConnection_minArgs = {
  field: GhostPageFieldSelector;
};


type GhostPageGroupConnection_sumArgs = {
  field: GhostPageFieldSelector;
};

type GhostPageSortInput = {
  readonly access: InputMaybe<SortOrderEnum>;
  readonly authors: InputMaybe<GhostAuthorSortInput>;
  readonly canonical_url: InputMaybe<SortOrderEnum>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly codeinjection_foot: InputMaybe<SortOrderEnum>;
  readonly codeinjection_head: InputMaybe<SortOrderEnum>;
  readonly codeinjection_styles: InputMaybe<SortOrderEnum>;
  readonly comment_id: InputMaybe<SortOrderEnum>;
  readonly created_at: InputMaybe<SortOrderEnum>;
  readonly custom_excerpt: InputMaybe<SortOrderEnum>;
  readonly custom_template: InputMaybe<SortOrderEnum>;
  readonly email_subject: InputMaybe<SortOrderEnum>;
  readonly excerpt: InputMaybe<SortOrderEnum>;
  readonly feature_image: InputMaybe<SortOrderEnum>;
  readonly featured: InputMaybe<SortOrderEnum>;
  readonly ghostId: InputMaybe<SortOrderEnum>;
  readonly html: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly meta_description: InputMaybe<SortOrderEnum>;
  readonly meta_title: InputMaybe<SortOrderEnum>;
  readonly og_description: InputMaybe<SortOrderEnum>;
  readonly og_image: InputMaybe<SortOrderEnum>;
  readonly og_title: InputMaybe<SortOrderEnum>;
  readonly page: InputMaybe<SortOrderEnum>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly plaintext: InputMaybe<SortOrderEnum>;
  readonly primary_author: InputMaybe<GhostAuthorSortInput>;
  readonly primary_tag: InputMaybe<GhostTagSortInput>;
  readonly published_at: InputMaybe<SortOrderEnum>;
  readonly reading_time: InputMaybe<SortOrderEnum>;
  readonly send_email_when_published: InputMaybe<SortOrderEnum>;
  readonly slug: InputMaybe<SortOrderEnum>;
  readonly tags: InputMaybe<GhostTagSortInput>;
  readonly title: InputMaybe<SortOrderEnum>;
  readonly twitter_description: InputMaybe<SortOrderEnum>;
  readonly twitter_image: InputMaybe<SortOrderEnum>;
  readonly twitter_title: InputMaybe<SortOrderEnum>;
  readonly updated_at: InputMaybe<SortOrderEnum>;
  readonly url: InputMaybe<SortOrderEnum>;
  readonly uuid: InputMaybe<SortOrderEnum>;
  readonly visibility: InputMaybe<SortOrderEnum>;
};

type GhostPost = Node & {
  readonly access: Maybe<Scalars['Boolean']>;
  readonly authors: ReadonlyArray<Maybe<GhostAuthor>>;
  readonly canonical_url: Maybe<Scalars['String']>;
  readonly children: ReadonlyArray<Node>;
  readonly codeinjection_foot: Maybe<Scalars['String']>;
  readonly codeinjection_head: Maybe<Scalars['String']>;
  readonly codeinjection_styles: Maybe<Scalars['String']>;
  readonly comment_id: Maybe<Scalars['String']>;
  readonly created_at: Scalars['Date'];
  readonly custom_excerpt: Maybe<Scalars['String']>;
  readonly custom_template: Maybe<Scalars['String']>;
  readonly email_recipient_filter: Maybe<Scalars['String']>;
  readonly email_subject: Maybe<Scalars['String']>;
  readonly excerpt: Maybe<Scalars['String']>;
  readonly feature_image: Maybe<Scalars['String']>;
  readonly featured: Scalars['Boolean'];
  readonly ghostId: Maybe<Scalars['String']>;
  readonly html: Maybe<Scalars['String']>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly meta_description: Maybe<Scalars['String']>;
  readonly meta_title: Maybe<Scalars['String']>;
  readonly og_description: Maybe<Scalars['String']>;
  readonly og_image: Maybe<Scalars['String']>;
  readonly og_title: Maybe<Scalars['String']>;
  readonly page: Maybe<Scalars['Boolean']>;
  readonly parent: Maybe<Node>;
  readonly plaintext: Maybe<Scalars['String']>;
  readonly primary_author: GhostAuthor;
  readonly primary_tag: Maybe<GhostTag>;
  readonly published_at: Maybe<Scalars['Date']>;
  readonly reading_time: Maybe<Scalars['Int']>;
  readonly send_email_when_published: Maybe<Scalars['Boolean']>;
  readonly slug: Scalars['String'];
  readonly tags: Maybe<ReadonlyArray<Maybe<GhostTag>>>;
  readonly title: Scalars['String'];
  readonly twitter_description: Maybe<Scalars['String']>;
  readonly twitter_image: Maybe<Scalars['String']>;
  readonly twitter_title: Maybe<Scalars['String']>;
  readonly updated_at: Maybe<Scalars['Date']>;
  readonly url: Scalars['String'];
  readonly uuid: Scalars['String'];
  readonly visibility: Scalars['String'];
};


type GhostPost_created_atArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type GhostPost_published_atArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type GhostPost_updated_atArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type GhostPostConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<GhostPostEdge>;
  readonly group: ReadonlyArray<GhostPostGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<GhostPost>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type GhostPostConnection_distinctArgs = {
  field: GhostPostFieldSelector;
};


type GhostPostConnection_groupArgs = {
  field: GhostPostFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type GhostPostConnection_maxArgs = {
  field: GhostPostFieldSelector;
};


type GhostPostConnection_minArgs = {
  field: GhostPostFieldSelector;
};


type GhostPostConnection_sumArgs = {
  field: GhostPostFieldSelector;
};

type GhostPostCount = {
  readonly posts: Maybe<Scalars['Int']>;
};

type GhostPostCountFieldSelector = {
  readonly posts: InputMaybe<FieldSelectorEnum>;
};

type GhostPostCountFilterInput = {
  readonly posts: InputMaybe<IntQueryOperatorInput>;
};

type GhostPostCountSortInput = {
  readonly posts: InputMaybe<SortOrderEnum>;
};

type GhostPostEdge = {
  readonly next: Maybe<GhostPost>;
  readonly node: GhostPost;
  readonly previous: Maybe<GhostPost>;
};

type GhostPostFieldSelector = {
  readonly access: InputMaybe<FieldSelectorEnum>;
  readonly authors: InputMaybe<GhostAuthorFieldSelector>;
  readonly canonical_url: InputMaybe<FieldSelectorEnum>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly codeinjection_foot: InputMaybe<FieldSelectorEnum>;
  readonly codeinjection_head: InputMaybe<FieldSelectorEnum>;
  readonly codeinjection_styles: InputMaybe<FieldSelectorEnum>;
  readonly comment_id: InputMaybe<FieldSelectorEnum>;
  readonly created_at: InputMaybe<FieldSelectorEnum>;
  readonly custom_excerpt: InputMaybe<FieldSelectorEnum>;
  readonly custom_template: InputMaybe<FieldSelectorEnum>;
  readonly email_recipient_filter: InputMaybe<FieldSelectorEnum>;
  readonly email_subject: InputMaybe<FieldSelectorEnum>;
  readonly excerpt: InputMaybe<FieldSelectorEnum>;
  readonly feature_image: InputMaybe<FieldSelectorEnum>;
  readonly featured: InputMaybe<FieldSelectorEnum>;
  readonly ghostId: InputMaybe<FieldSelectorEnum>;
  readonly html: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly meta_description: InputMaybe<FieldSelectorEnum>;
  readonly meta_title: InputMaybe<FieldSelectorEnum>;
  readonly og_description: InputMaybe<FieldSelectorEnum>;
  readonly og_image: InputMaybe<FieldSelectorEnum>;
  readonly og_title: InputMaybe<FieldSelectorEnum>;
  readonly page: InputMaybe<FieldSelectorEnum>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly plaintext: InputMaybe<FieldSelectorEnum>;
  readonly primary_author: InputMaybe<GhostAuthorFieldSelector>;
  readonly primary_tag: InputMaybe<GhostTagFieldSelector>;
  readonly published_at: InputMaybe<FieldSelectorEnum>;
  readonly reading_time: InputMaybe<FieldSelectorEnum>;
  readonly send_email_when_published: InputMaybe<FieldSelectorEnum>;
  readonly slug: InputMaybe<FieldSelectorEnum>;
  readonly tags: InputMaybe<GhostTagFieldSelector>;
  readonly title: InputMaybe<FieldSelectorEnum>;
  readonly twitter_description: InputMaybe<FieldSelectorEnum>;
  readonly twitter_image: InputMaybe<FieldSelectorEnum>;
  readonly twitter_title: InputMaybe<FieldSelectorEnum>;
  readonly updated_at: InputMaybe<FieldSelectorEnum>;
  readonly url: InputMaybe<FieldSelectorEnum>;
  readonly uuid: InputMaybe<FieldSelectorEnum>;
  readonly visibility: InputMaybe<FieldSelectorEnum>;
};

type GhostPostFilterInput = {
  readonly access: InputMaybe<BooleanQueryOperatorInput>;
  readonly authors: InputMaybe<GhostAuthorFilterListInput>;
  readonly canonical_url: InputMaybe<StringQueryOperatorInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly codeinjection_foot: InputMaybe<StringQueryOperatorInput>;
  readonly codeinjection_head: InputMaybe<StringQueryOperatorInput>;
  readonly codeinjection_styles: InputMaybe<StringQueryOperatorInput>;
  readonly comment_id: InputMaybe<StringQueryOperatorInput>;
  readonly created_at: InputMaybe<DateQueryOperatorInput>;
  readonly custom_excerpt: InputMaybe<StringQueryOperatorInput>;
  readonly custom_template: InputMaybe<StringQueryOperatorInput>;
  readonly email_recipient_filter: InputMaybe<StringQueryOperatorInput>;
  readonly email_subject: InputMaybe<StringQueryOperatorInput>;
  readonly excerpt: InputMaybe<StringQueryOperatorInput>;
  readonly feature_image: InputMaybe<StringQueryOperatorInput>;
  readonly featured: InputMaybe<BooleanQueryOperatorInput>;
  readonly ghostId: InputMaybe<StringQueryOperatorInput>;
  readonly html: InputMaybe<StringQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly meta_description: InputMaybe<StringQueryOperatorInput>;
  readonly meta_title: InputMaybe<StringQueryOperatorInput>;
  readonly og_description: InputMaybe<StringQueryOperatorInput>;
  readonly og_image: InputMaybe<StringQueryOperatorInput>;
  readonly og_title: InputMaybe<StringQueryOperatorInput>;
  readonly page: InputMaybe<BooleanQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly plaintext: InputMaybe<StringQueryOperatorInput>;
  readonly primary_author: InputMaybe<GhostAuthorFilterInput>;
  readonly primary_tag: InputMaybe<GhostTagFilterInput>;
  readonly published_at: InputMaybe<DateQueryOperatorInput>;
  readonly reading_time: InputMaybe<IntQueryOperatorInput>;
  readonly send_email_when_published: InputMaybe<BooleanQueryOperatorInput>;
  readonly slug: InputMaybe<StringQueryOperatorInput>;
  readonly tags: InputMaybe<GhostTagFilterListInput>;
  readonly title: InputMaybe<StringQueryOperatorInput>;
  readonly twitter_description: InputMaybe<StringQueryOperatorInput>;
  readonly twitter_image: InputMaybe<StringQueryOperatorInput>;
  readonly twitter_title: InputMaybe<StringQueryOperatorInput>;
  readonly updated_at: InputMaybe<DateQueryOperatorInput>;
  readonly url: InputMaybe<StringQueryOperatorInput>;
  readonly uuid: InputMaybe<StringQueryOperatorInput>;
  readonly visibility: InputMaybe<StringQueryOperatorInput>;
};

type GhostPostGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<GhostPostEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<GhostPostGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<GhostPost>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type GhostPostGroupConnection_distinctArgs = {
  field: GhostPostFieldSelector;
};


type GhostPostGroupConnection_groupArgs = {
  field: GhostPostFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type GhostPostGroupConnection_maxArgs = {
  field: GhostPostFieldSelector;
};


type GhostPostGroupConnection_minArgs = {
  field: GhostPostFieldSelector;
};


type GhostPostGroupConnection_sumArgs = {
  field: GhostPostFieldSelector;
};

type GhostPostSortInput = {
  readonly access: InputMaybe<SortOrderEnum>;
  readonly authors: InputMaybe<GhostAuthorSortInput>;
  readonly canonical_url: InputMaybe<SortOrderEnum>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly codeinjection_foot: InputMaybe<SortOrderEnum>;
  readonly codeinjection_head: InputMaybe<SortOrderEnum>;
  readonly codeinjection_styles: InputMaybe<SortOrderEnum>;
  readonly comment_id: InputMaybe<SortOrderEnum>;
  readonly created_at: InputMaybe<SortOrderEnum>;
  readonly custom_excerpt: InputMaybe<SortOrderEnum>;
  readonly custom_template: InputMaybe<SortOrderEnum>;
  readonly email_recipient_filter: InputMaybe<SortOrderEnum>;
  readonly email_subject: InputMaybe<SortOrderEnum>;
  readonly excerpt: InputMaybe<SortOrderEnum>;
  readonly feature_image: InputMaybe<SortOrderEnum>;
  readonly featured: InputMaybe<SortOrderEnum>;
  readonly ghostId: InputMaybe<SortOrderEnum>;
  readonly html: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly meta_description: InputMaybe<SortOrderEnum>;
  readonly meta_title: InputMaybe<SortOrderEnum>;
  readonly og_description: InputMaybe<SortOrderEnum>;
  readonly og_image: InputMaybe<SortOrderEnum>;
  readonly og_title: InputMaybe<SortOrderEnum>;
  readonly page: InputMaybe<SortOrderEnum>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly plaintext: InputMaybe<SortOrderEnum>;
  readonly primary_author: InputMaybe<GhostAuthorSortInput>;
  readonly primary_tag: InputMaybe<GhostTagSortInput>;
  readonly published_at: InputMaybe<SortOrderEnum>;
  readonly reading_time: InputMaybe<SortOrderEnum>;
  readonly send_email_when_published: InputMaybe<SortOrderEnum>;
  readonly slug: InputMaybe<SortOrderEnum>;
  readonly tags: InputMaybe<GhostTagSortInput>;
  readonly title: InputMaybe<SortOrderEnum>;
  readonly twitter_description: InputMaybe<SortOrderEnum>;
  readonly twitter_image: InputMaybe<SortOrderEnum>;
  readonly twitter_title: InputMaybe<SortOrderEnum>;
  readonly updated_at: InputMaybe<SortOrderEnum>;
  readonly url: InputMaybe<SortOrderEnum>;
  readonly uuid: InputMaybe<SortOrderEnum>;
  readonly visibility: InputMaybe<SortOrderEnum>;
};

type GhostSettings = Node & {
  readonly active_timezone: Maybe<Scalars['String']>;
  readonly children: ReadonlyArray<Node>;
  readonly codeinjection_foot: Maybe<Scalars['String']>;
  readonly codeinjection_head: Maybe<Scalars['String']>;
  readonly codeinjection_styles: Scalars['String'];
  readonly cover_image: Maybe<Scalars['String']>;
  readonly default_locale: Maybe<Scalars['String']>;
  readonly description: Maybe<Scalars['String']>;
  readonly facebook: Maybe<Scalars['String']>;
  readonly ghostId: Maybe<Scalars['Int']>;
  readonly icon: Maybe<Scalars['String']>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly lang: Scalars['String'];
  readonly logo: Maybe<Scalars['String']>;
  readonly members_support_address: Maybe<Scalars['String']>;
  readonly meta_description: Maybe<Scalars['String']>;
  readonly meta_title: Maybe<Scalars['String']>;
  readonly navigation: Maybe<ReadonlyArray<Maybe<GhostNavigation>>>;
  readonly og_description: Maybe<Scalars['String']>;
  readonly og_image: Maybe<Scalars['String']>;
  readonly og_title: Maybe<Scalars['String']>;
  readonly parent: Maybe<Node>;
  readonly secondary_navigation: Maybe<ReadonlyArray<Maybe<GhostNavigation>>>;
  readonly timezone: Scalars['String'];
  readonly title: Maybe<Scalars['String']>;
  readonly twitter: Maybe<Scalars['String']>;
  readonly twitter_description: Maybe<Scalars['String']>;
  readonly twitter_image: Maybe<Scalars['String']>;
  readonly twitter_title: Maybe<Scalars['String']>;
  readonly url: Scalars['String'];
};

type GhostSettingsConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<GhostSettingsEdge>;
  readonly group: ReadonlyArray<GhostSettingsGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<GhostSettings>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type GhostSettingsConnection_distinctArgs = {
  field: GhostSettingsFieldSelector;
};


type GhostSettingsConnection_groupArgs = {
  field: GhostSettingsFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type GhostSettingsConnection_maxArgs = {
  field: GhostSettingsFieldSelector;
};


type GhostSettingsConnection_minArgs = {
  field: GhostSettingsFieldSelector;
};


type GhostSettingsConnection_sumArgs = {
  field: GhostSettingsFieldSelector;
};

type GhostSettingsEdge = {
  readonly next: Maybe<GhostSettings>;
  readonly node: GhostSettings;
  readonly previous: Maybe<GhostSettings>;
};

type GhostSettingsFieldSelector = {
  readonly active_timezone: InputMaybe<FieldSelectorEnum>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly codeinjection_foot: InputMaybe<FieldSelectorEnum>;
  readonly codeinjection_head: InputMaybe<FieldSelectorEnum>;
  readonly codeinjection_styles: InputMaybe<FieldSelectorEnum>;
  readonly cover_image: InputMaybe<FieldSelectorEnum>;
  readonly default_locale: InputMaybe<FieldSelectorEnum>;
  readonly description: InputMaybe<FieldSelectorEnum>;
  readonly facebook: InputMaybe<FieldSelectorEnum>;
  readonly ghostId: InputMaybe<FieldSelectorEnum>;
  readonly icon: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly lang: InputMaybe<FieldSelectorEnum>;
  readonly logo: InputMaybe<FieldSelectorEnum>;
  readonly members_support_address: InputMaybe<FieldSelectorEnum>;
  readonly meta_description: InputMaybe<FieldSelectorEnum>;
  readonly meta_title: InputMaybe<FieldSelectorEnum>;
  readonly navigation: InputMaybe<GhostNavigationFieldSelector>;
  readonly og_description: InputMaybe<FieldSelectorEnum>;
  readonly og_image: InputMaybe<FieldSelectorEnum>;
  readonly og_title: InputMaybe<FieldSelectorEnum>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly secondary_navigation: InputMaybe<GhostNavigationFieldSelector>;
  readonly timezone: InputMaybe<FieldSelectorEnum>;
  readonly title: InputMaybe<FieldSelectorEnum>;
  readonly twitter: InputMaybe<FieldSelectorEnum>;
  readonly twitter_description: InputMaybe<FieldSelectorEnum>;
  readonly twitter_image: InputMaybe<FieldSelectorEnum>;
  readonly twitter_title: InputMaybe<FieldSelectorEnum>;
  readonly url: InputMaybe<FieldSelectorEnum>;
};

type GhostSettingsFilterInput = {
  readonly active_timezone: InputMaybe<StringQueryOperatorInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly codeinjection_foot: InputMaybe<StringQueryOperatorInput>;
  readonly codeinjection_head: InputMaybe<StringQueryOperatorInput>;
  readonly codeinjection_styles: InputMaybe<StringQueryOperatorInput>;
  readonly cover_image: InputMaybe<StringQueryOperatorInput>;
  readonly default_locale: InputMaybe<StringQueryOperatorInput>;
  readonly description: InputMaybe<StringQueryOperatorInput>;
  readonly facebook: InputMaybe<StringQueryOperatorInput>;
  readonly ghostId: InputMaybe<IntQueryOperatorInput>;
  readonly icon: InputMaybe<StringQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly lang: InputMaybe<StringQueryOperatorInput>;
  readonly logo: InputMaybe<StringQueryOperatorInput>;
  readonly members_support_address: InputMaybe<StringQueryOperatorInput>;
  readonly meta_description: InputMaybe<StringQueryOperatorInput>;
  readonly meta_title: InputMaybe<StringQueryOperatorInput>;
  readonly navigation: InputMaybe<GhostNavigationFilterListInput>;
  readonly og_description: InputMaybe<StringQueryOperatorInput>;
  readonly og_image: InputMaybe<StringQueryOperatorInput>;
  readonly og_title: InputMaybe<StringQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly secondary_navigation: InputMaybe<GhostNavigationFilterListInput>;
  readonly timezone: InputMaybe<StringQueryOperatorInput>;
  readonly title: InputMaybe<StringQueryOperatorInput>;
  readonly twitter: InputMaybe<StringQueryOperatorInput>;
  readonly twitter_description: InputMaybe<StringQueryOperatorInput>;
  readonly twitter_image: InputMaybe<StringQueryOperatorInput>;
  readonly twitter_title: InputMaybe<StringQueryOperatorInput>;
  readonly url: InputMaybe<StringQueryOperatorInput>;
};

type GhostSettingsGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<GhostSettingsEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<GhostSettingsGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<GhostSettings>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type GhostSettingsGroupConnection_distinctArgs = {
  field: GhostSettingsFieldSelector;
};


type GhostSettingsGroupConnection_groupArgs = {
  field: GhostSettingsFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type GhostSettingsGroupConnection_maxArgs = {
  field: GhostSettingsFieldSelector;
};


type GhostSettingsGroupConnection_minArgs = {
  field: GhostSettingsFieldSelector;
};


type GhostSettingsGroupConnection_sumArgs = {
  field: GhostSettingsFieldSelector;
};

type GhostSettingsSortInput = {
  readonly active_timezone: InputMaybe<SortOrderEnum>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly codeinjection_foot: InputMaybe<SortOrderEnum>;
  readonly codeinjection_head: InputMaybe<SortOrderEnum>;
  readonly codeinjection_styles: InputMaybe<SortOrderEnum>;
  readonly cover_image: InputMaybe<SortOrderEnum>;
  readonly default_locale: InputMaybe<SortOrderEnum>;
  readonly description: InputMaybe<SortOrderEnum>;
  readonly facebook: InputMaybe<SortOrderEnum>;
  readonly ghostId: InputMaybe<SortOrderEnum>;
  readonly icon: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly lang: InputMaybe<SortOrderEnum>;
  readonly logo: InputMaybe<SortOrderEnum>;
  readonly members_support_address: InputMaybe<SortOrderEnum>;
  readonly meta_description: InputMaybe<SortOrderEnum>;
  readonly meta_title: InputMaybe<SortOrderEnum>;
  readonly navigation: InputMaybe<GhostNavigationSortInput>;
  readonly og_description: InputMaybe<SortOrderEnum>;
  readonly og_image: InputMaybe<SortOrderEnum>;
  readonly og_title: InputMaybe<SortOrderEnum>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly secondary_navigation: InputMaybe<GhostNavigationSortInput>;
  readonly timezone: InputMaybe<SortOrderEnum>;
  readonly title: InputMaybe<SortOrderEnum>;
  readonly twitter: InputMaybe<SortOrderEnum>;
  readonly twitter_description: InputMaybe<SortOrderEnum>;
  readonly twitter_image: InputMaybe<SortOrderEnum>;
  readonly twitter_title: InputMaybe<SortOrderEnum>;
  readonly url: InputMaybe<SortOrderEnum>;
};

type GhostTag = Node & {
  readonly accent_color: Maybe<Scalars['String']>;
  readonly canonical_url: Maybe<Scalars['String']>;
  readonly children: ReadonlyArray<Node>;
  readonly codeinjection_foot: Maybe<Scalars['String']>;
  readonly codeinjection_head: Maybe<Scalars['String']>;
  readonly count: Maybe<GhostPostCount>;
  readonly description: Maybe<Scalars['String']>;
  readonly feature_image: Maybe<Scalars['String']>;
  readonly ghostId: Maybe<Scalars['String']>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly meta_description: Maybe<Scalars['String']>;
  readonly meta_title: Maybe<Scalars['String']>;
  readonly name: Scalars['String'];
  readonly og_description: Maybe<Scalars['String']>;
  readonly og_image: Maybe<Scalars['String']>;
  readonly og_title: Maybe<Scalars['String']>;
  readonly parent: Maybe<Node>;
  readonly postCount: Maybe<Scalars['Int']>;
  readonly slug: Scalars['String'];
  readonly twitter_description: Maybe<Scalars['String']>;
  readonly twitter_image: Maybe<Scalars['String']>;
  readonly twitter_title: Maybe<Scalars['String']>;
  readonly url: Scalars['String'];
  readonly visibility: Scalars['String'];
};

type GhostTagConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<GhostTagEdge>;
  readonly group: ReadonlyArray<GhostTagGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<GhostTag>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type GhostTagConnection_distinctArgs = {
  field: GhostTagFieldSelector;
};


type GhostTagConnection_groupArgs = {
  field: GhostTagFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type GhostTagConnection_maxArgs = {
  field: GhostTagFieldSelector;
};


type GhostTagConnection_minArgs = {
  field: GhostTagFieldSelector;
};


type GhostTagConnection_sumArgs = {
  field: GhostTagFieldSelector;
};

type GhostTagEdge = {
  readonly next: Maybe<GhostTag>;
  readonly node: GhostTag;
  readonly previous: Maybe<GhostTag>;
};

type GhostTagFieldSelector = {
  readonly accent_color: InputMaybe<FieldSelectorEnum>;
  readonly canonical_url: InputMaybe<FieldSelectorEnum>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly codeinjection_foot: InputMaybe<FieldSelectorEnum>;
  readonly codeinjection_head: InputMaybe<FieldSelectorEnum>;
  readonly count: InputMaybe<GhostPostCountFieldSelector>;
  readonly description: InputMaybe<FieldSelectorEnum>;
  readonly feature_image: InputMaybe<FieldSelectorEnum>;
  readonly ghostId: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly meta_description: InputMaybe<FieldSelectorEnum>;
  readonly meta_title: InputMaybe<FieldSelectorEnum>;
  readonly name: InputMaybe<FieldSelectorEnum>;
  readonly og_description: InputMaybe<FieldSelectorEnum>;
  readonly og_image: InputMaybe<FieldSelectorEnum>;
  readonly og_title: InputMaybe<FieldSelectorEnum>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly postCount: InputMaybe<FieldSelectorEnum>;
  readonly slug: InputMaybe<FieldSelectorEnum>;
  readonly twitter_description: InputMaybe<FieldSelectorEnum>;
  readonly twitter_image: InputMaybe<FieldSelectorEnum>;
  readonly twitter_title: InputMaybe<FieldSelectorEnum>;
  readonly url: InputMaybe<FieldSelectorEnum>;
  readonly visibility: InputMaybe<FieldSelectorEnum>;
};

type GhostTagFilterInput = {
  readonly accent_color: InputMaybe<StringQueryOperatorInput>;
  readonly canonical_url: InputMaybe<StringQueryOperatorInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly codeinjection_foot: InputMaybe<StringQueryOperatorInput>;
  readonly codeinjection_head: InputMaybe<StringQueryOperatorInput>;
  readonly count: InputMaybe<GhostPostCountFilterInput>;
  readonly description: InputMaybe<StringQueryOperatorInput>;
  readonly feature_image: InputMaybe<StringQueryOperatorInput>;
  readonly ghostId: InputMaybe<StringQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly meta_description: InputMaybe<StringQueryOperatorInput>;
  readonly meta_title: InputMaybe<StringQueryOperatorInput>;
  readonly name: InputMaybe<StringQueryOperatorInput>;
  readonly og_description: InputMaybe<StringQueryOperatorInput>;
  readonly og_image: InputMaybe<StringQueryOperatorInput>;
  readonly og_title: InputMaybe<StringQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly postCount: InputMaybe<IntQueryOperatorInput>;
  readonly slug: InputMaybe<StringQueryOperatorInput>;
  readonly twitter_description: InputMaybe<StringQueryOperatorInput>;
  readonly twitter_image: InputMaybe<StringQueryOperatorInput>;
  readonly twitter_title: InputMaybe<StringQueryOperatorInput>;
  readonly url: InputMaybe<StringQueryOperatorInput>;
  readonly visibility: InputMaybe<StringQueryOperatorInput>;
};

type GhostTagFilterListInput = {
  readonly elemMatch: InputMaybe<GhostTagFilterInput>;
};

type GhostTagGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<GhostTagEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<GhostTagGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<GhostTag>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type GhostTagGroupConnection_distinctArgs = {
  field: GhostTagFieldSelector;
};


type GhostTagGroupConnection_groupArgs = {
  field: GhostTagFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type GhostTagGroupConnection_maxArgs = {
  field: GhostTagFieldSelector;
};


type GhostTagGroupConnection_minArgs = {
  field: GhostTagFieldSelector;
};


type GhostTagGroupConnection_sumArgs = {
  field: GhostTagFieldSelector;
};

type GhostTagSortInput = {
  readonly accent_color: InputMaybe<SortOrderEnum>;
  readonly canonical_url: InputMaybe<SortOrderEnum>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly codeinjection_foot: InputMaybe<SortOrderEnum>;
  readonly codeinjection_head: InputMaybe<SortOrderEnum>;
  readonly count: InputMaybe<GhostPostCountSortInput>;
  readonly description: InputMaybe<SortOrderEnum>;
  readonly feature_image: InputMaybe<SortOrderEnum>;
  readonly ghostId: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly meta_description: InputMaybe<SortOrderEnum>;
  readonly meta_title: InputMaybe<SortOrderEnum>;
  readonly name: InputMaybe<SortOrderEnum>;
  readonly og_description: InputMaybe<SortOrderEnum>;
  readonly og_image: InputMaybe<SortOrderEnum>;
  readonly og_title: InputMaybe<SortOrderEnum>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly postCount: InputMaybe<SortOrderEnum>;
  readonly slug: InputMaybe<SortOrderEnum>;
  readonly twitter_description: InputMaybe<SortOrderEnum>;
  readonly twitter_image: InputMaybe<SortOrderEnum>;
  readonly twitter_title: InputMaybe<SortOrderEnum>;
  readonly url: InputMaybe<SortOrderEnum>;
  readonly visibility: InputMaybe<SortOrderEnum>;
};

type IntQueryOperatorInput = {
  readonly eq: InputMaybe<Scalars['Int']>;
  readonly gt: InputMaybe<Scalars['Int']>;
  readonly gte: InputMaybe<Scalars['Int']>;
  readonly in: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Int']>>>;
  readonly lt: InputMaybe<Scalars['Int']>;
  readonly lte: InputMaybe<Scalars['Int']>;
  readonly ne: InputMaybe<Scalars['Int']>;
  readonly nin: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Int']>>>;
};

type Internal = {
  readonly content: Maybe<Scalars['String']>;
  readonly contentDigest: Scalars['String'];
  readonly contentFilePath: Maybe<Scalars['String']>;
  readonly description: Maybe<Scalars['String']>;
  readonly fieldOwners: Maybe<ReadonlyArray<Maybe<Scalars['String']>>>;
  readonly ignoreType: Maybe<Scalars['Boolean']>;
  readonly mediaType: Maybe<Scalars['String']>;
  readonly owner: Scalars['String'];
  readonly type: Scalars['String'];
};

type InternalFieldSelector = {
  readonly content: InputMaybe<FieldSelectorEnum>;
  readonly contentDigest: InputMaybe<FieldSelectorEnum>;
  readonly contentFilePath: InputMaybe<FieldSelectorEnum>;
  readonly description: InputMaybe<FieldSelectorEnum>;
  readonly fieldOwners: InputMaybe<FieldSelectorEnum>;
  readonly ignoreType: InputMaybe<FieldSelectorEnum>;
  readonly mediaType: InputMaybe<FieldSelectorEnum>;
  readonly owner: InputMaybe<FieldSelectorEnum>;
  readonly type: InputMaybe<FieldSelectorEnum>;
};

type InternalFilterInput = {
  readonly content: InputMaybe<StringQueryOperatorInput>;
  readonly contentDigest: InputMaybe<StringQueryOperatorInput>;
  readonly contentFilePath: InputMaybe<StringQueryOperatorInput>;
  readonly description: InputMaybe<StringQueryOperatorInput>;
  readonly fieldOwners: InputMaybe<StringQueryOperatorInput>;
  readonly ignoreType: InputMaybe<BooleanQueryOperatorInput>;
  readonly mediaType: InputMaybe<StringQueryOperatorInput>;
  readonly owner: InputMaybe<StringQueryOperatorInput>;
  readonly type: InputMaybe<StringQueryOperatorInput>;
};

type InternalSortInput = {
  readonly content: InputMaybe<SortOrderEnum>;
  readonly contentDigest: InputMaybe<SortOrderEnum>;
  readonly contentFilePath: InputMaybe<SortOrderEnum>;
  readonly description: InputMaybe<SortOrderEnum>;
  readonly fieldOwners: InputMaybe<SortOrderEnum>;
  readonly ignoreType: InputMaybe<SortOrderEnum>;
  readonly mediaType: InputMaybe<SortOrderEnum>;
  readonly owner: InputMaybe<SortOrderEnum>;
  readonly type: InputMaybe<SortOrderEnum>;
};

type JSONQueryOperatorInput = {
  readonly eq: InputMaybe<Scalars['JSON']>;
  readonly glob: InputMaybe<Scalars['JSON']>;
  readonly in: InputMaybe<ReadonlyArray<InputMaybe<Scalars['JSON']>>>;
  readonly ne: InputMaybe<Scalars['JSON']>;
  readonly nin: InputMaybe<ReadonlyArray<InputMaybe<Scalars['JSON']>>>;
  readonly regex: InputMaybe<Scalars['JSON']>;
};

/** Node Interface */
type Node = {
  readonly children: ReadonlyArray<Node>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly parent: Maybe<Node>;
};

type NodeFieldSelector = {
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly parent: InputMaybe<NodeFieldSelector>;
};

type NodeFilterInput = {
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
};

type NodeFilterListInput = {
  readonly elemMatch: InputMaybe<NodeFilterInput>;
};

type NodeSortInput = {
  readonly children: InputMaybe<NodeSortInput>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly parent: InputMaybe<NodeSortInput>;
};

type PageInfo = {
  readonly currentPage: Scalars['Int'];
  readonly hasNextPage: Scalars['Boolean'];
  readonly hasPreviousPage: Scalars['Boolean'];
  readonly itemCount: Scalars['Int'];
  readonly pageCount: Scalars['Int'];
  readonly perPage: Maybe<Scalars['Int']>;
  readonly totalCount: Scalars['Int'];
};

type Query = {
  readonly airtable: Maybe<Airtable>;
  readonly allAirtable: AirtableConnection;
  readonly allDirectory: DirectoryConnection;
  readonly allFile: FileConnection;
  readonly allGhostAuthor: GhostAuthorConnection;
  readonly allGhostPage: GhostPageConnection;
  readonly allGhostPost: GhostPostConnection;
  readonly allGhostSettings: GhostSettingsConnection;
  readonly allGhostTag: GhostTagConnection;
  readonly allSite: SiteConnection;
  readonly allSiteBuildMetadata: SiteBuildMetadataConnection;
  readonly allSiteFunction: SiteFunctionConnection;
  readonly allSitePage: SitePageConnection;
  readonly allSitePlugin: SitePluginConnection;
  readonly directory: Maybe<Directory>;
  readonly file: Maybe<File>;
  readonly ghostAuthor: Maybe<GhostAuthor>;
  readonly ghostPage: Maybe<GhostPage>;
  readonly ghostPost: Maybe<GhostPost>;
  readonly ghostSettings: Maybe<GhostSettings>;
  readonly ghostTag: Maybe<GhostTag>;
  readonly site: Maybe<Site>;
  readonly siteBuildMetadata: Maybe<SiteBuildMetadata>;
  readonly siteFunction: Maybe<SiteFunction>;
  readonly sitePage: Maybe<SitePage>;
  readonly sitePlugin: Maybe<SitePlugin>;
};


type Query_airtableArgs = {
  children: InputMaybe<NodeFilterListInput>;
  data: InputMaybe<AirtableDataFilterInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  parent: InputMaybe<NodeFilterInput>;
  recordId: InputMaybe<StringQueryOperatorInput>;
  rowIndex: InputMaybe<IntQueryOperatorInput>;
  table: InputMaybe<StringQueryOperatorInput>;
};


type Query_allAirtableArgs = {
  filter: InputMaybe<AirtableFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<AirtableSortInput>>>;
};


type Query_allDirectoryArgs = {
  filter: InputMaybe<DirectoryFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<DirectorySortInput>>>;
};


type Query_allFileArgs = {
  filter: InputMaybe<FileFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<FileSortInput>>>;
};


type Query_allGhostAuthorArgs = {
  filter: InputMaybe<GhostAuthorFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<GhostAuthorSortInput>>>;
};


type Query_allGhostPageArgs = {
  filter: InputMaybe<GhostPageFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<GhostPageSortInput>>>;
};


type Query_allGhostPostArgs = {
  filter: InputMaybe<GhostPostFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<GhostPostSortInput>>>;
};


type Query_allGhostSettingsArgs = {
  filter: InputMaybe<GhostSettingsFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<GhostSettingsSortInput>>>;
};


type Query_allGhostTagArgs = {
  filter: InputMaybe<GhostTagFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<GhostTagSortInput>>>;
};


type Query_allSiteArgs = {
  filter: InputMaybe<SiteFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<SiteSortInput>>>;
};


type Query_allSiteBuildMetadataArgs = {
  filter: InputMaybe<SiteBuildMetadataFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<SiteBuildMetadataSortInput>>>;
};


type Query_allSiteFunctionArgs = {
  filter: InputMaybe<SiteFunctionFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<SiteFunctionSortInput>>>;
};


type Query_allSitePageArgs = {
  filter: InputMaybe<SitePageFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<SitePageSortInput>>>;
};


type Query_allSitePluginArgs = {
  filter: InputMaybe<SitePluginFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<SitePluginSortInput>>>;
};


type Query_directoryArgs = {
  absolutePath: InputMaybe<StringQueryOperatorInput>;
  accessTime: InputMaybe<DateQueryOperatorInput>;
  atime: InputMaybe<DateQueryOperatorInput>;
  atimeMs: InputMaybe<FloatQueryOperatorInput>;
  base: InputMaybe<StringQueryOperatorInput>;
  birthTime: InputMaybe<DateQueryOperatorInput>;
  birthtime: InputMaybe<DateQueryOperatorInput>;
  birthtimeMs: InputMaybe<FloatQueryOperatorInput>;
  changeTime: InputMaybe<DateQueryOperatorInput>;
  children: InputMaybe<NodeFilterListInput>;
  ctime: InputMaybe<DateQueryOperatorInput>;
  ctimeMs: InputMaybe<FloatQueryOperatorInput>;
  dev: InputMaybe<IntQueryOperatorInput>;
  dir: InputMaybe<StringQueryOperatorInput>;
  ext: InputMaybe<StringQueryOperatorInput>;
  extension: InputMaybe<StringQueryOperatorInput>;
  gid: InputMaybe<IntQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  ino: InputMaybe<FloatQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  mode: InputMaybe<IntQueryOperatorInput>;
  modifiedTime: InputMaybe<DateQueryOperatorInput>;
  mtime: InputMaybe<DateQueryOperatorInput>;
  mtimeMs: InputMaybe<FloatQueryOperatorInput>;
  name: InputMaybe<StringQueryOperatorInput>;
  nlink: InputMaybe<IntQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  prettySize: InputMaybe<StringQueryOperatorInput>;
  rdev: InputMaybe<IntQueryOperatorInput>;
  relativeDirectory: InputMaybe<StringQueryOperatorInput>;
  relativePath: InputMaybe<StringQueryOperatorInput>;
  root: InputMaybe<StringQueryOperatorInput>;
  size: InputMaybe<IntQueryOperatorInput>;
  sourceInstanceName: InputMaybe<StringQueryOperatorInput>;
  uid: InputMaybe<IntQueryOperatorInput>;
};


type Query_fileArgs = {
  absolutePath: InputMaybe<StringQueryOperatorInput>;
  accessTime: InputMaybe<DateQueryOperatorInput>;
  atime: InputMaybe<DateQueryOperatorInput>;
  atimeMs: InputMaybe<FloatQueryOperatorInput>;
  base: InputMaybe<StringQueryOperatorInput>;
  birthTime: InputMaybe<DateQueryOperatorInput>;
  birthtime: InputMaybe<DateQueryOperatorInput>;
  birthtimeMs: InputMaybe<FloatQueryOperatorInput>;
  changeTime: InputMaybe<DateQueryOperatorInput>;
  children: InputMaybe<NodeFilterListInput>;
  ctime: InputMaybe<DateQueryOperatorInput>;
  ctimeMs: InputMaybe<FloatQueryOperatorInput>;
  dev: InputMaybe<IntQueryOperatorInput>;
  dir: InputMaybe<StringQueryOperatorInput>;
  ext: InputMaybe<StringQueryOperatorInput>;
  extension: InputMaybe<StringQueryOperatorInput>;
  gid: InputMaybe<IntQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  ino: InputMaybe<FloatQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  mode: InputMaybe<IntQueryOperatorInput>;
  modifiedTime: InputMaybe<DateQueryOperatorInput>;
  mtime: InputMaybe<DateQueryOperatorInput>;
  mtimeMs: InputMaybe<FloatQueryOperatorInput>;
  name: InputMaybe<StringQueryOperatorInput>;
  nlink: InputMaybe<IntQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  prettySize: InputMaybe<StringQueryOperatorInput>;
  rdev: InputMaybe<IntQueryOperatorInput>;
  relativeDirectory: InputMaybe<StringQueryOperatorInput>;
  relativePath: InputMaybe<StringQueryOperatorInput>;
  root: InputMaybe<StringQueryOperatorInput>;
  size: InputMaybe<IntQueryOperatorInput>;
  sourceInstanceName: InputMaybe<StringQueryOperatorInput>;
  uid: InputMaybe<IntQueryOperatorInput>;
};


type Query_ghostAuthorArgs = {
  bio: InputMaybe<StringQueryOperatorInput>;
  children: InputMaybe<NodeFilterListInput>;
  count: InputMaybe<GhostPostCountFilterInput>;
  cover_image: InputMaybe<StringQueryOperatorInput>;
  facebook: InputMaybe<StringQueryOperatorInput>;
  ghostId: InputMaybe<StringQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  location: InputMaybe<StringQueryOperatorInput>;
  meta_description: InputMaybe<StringQueryOperatorInput>;
  meta_title: InputMaybe<StringQueryOperatorInput>;
  name: InputMaybe<StringQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  postCount: InputMaybe<IntQueryOperatorInput>;
  profile_image: InputMaybe<StringQueryOperatorInput>;
  slug: InputMaybe<StringQueryOperatorInput>;
  twitter: InputMaybe<StringQueryOperatorInput>;
  url: InputMaybe<StringQueryOperatorInput>;
  website: InputMaybe<StringQueryOperatorInput>;
};


type Query_ghostPageArgs = {
  access: InputMaybe<BooleanQueryOperatorInput>;
  authors: InputMaybe<GhostAuthorFilterListInput>;
  canonical_url: InputMaybe<StringQueryOperatorInput>;
  children: InputMaybe<NodeFilterListInput>;
  codeinjection_foot: InputMaybe<StringQueryOperatorInput>;
  codeinjection_head: InputMaybe<StringQueryOperatorInput>;
  codeinjection_styles: InputMaybe<StringQueryOperatorInput>;
  comment_id: InputMaybe<StringQueryOperatorInput>;
  created_at: InputMaybe<DateQueryOperatorInput>;
  custom_excerpt: InputMaybe<StringQueryOperatorInput>;
  custom_template: InputMaybe<StringQueryOperatorInput>;
  email_subject: InputMaybe<StringQueryOperatorInput>;
  excerpt: InputMaybe<StringQueryOperatorInput>;
  feature_image: InputMaybe<StringQueryOperatorInput>;
  featured: InputMaybe<BooleanQueryOperatorInput>;
  ghostId: InputMaybe<StringQueryOperatorInput>;
  html: InputMaybe<StringQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  meta_description: InputMaybe<StringQueryOperatorInput>;
  meta_title: InputMaybe<StringQueryOperatorInput>;
  og_description: InputMaybe<StringQueryOperatorInput>;
  og_image: InputMaybe<StringQueryOperatorInput>;
  og_title: InputMaybe<StringQueryOperatorInput>;
  page: InputMaybe<BooleanQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  plaintext: InputMaybe<StringQueryOperatorInput>;
  primary_author: InputMaybe<GhostAuthorFilterInput>;
  primary_tag: InputMaybe<GhostTagFilterInput>;
  published_at: InputMaybe<DateQueryOperatorInput>;
  reading_time: InputMaybe<IntQueryOperatorInput>;
  send_email_when_published: InputMaybe<BooleanQueryOperatorInput>;
  slug: InputMaybe<StringQueryOperatorInput>;
  tags: InputMaybe<GhostTagFilterListInput>;
  title: InputMaybe<StringQueryOperatorInput>;
  twitter_description: InputMaybe<StringQueryOperatorInput>;
  twitter_image: InputMaybe<StringQueryOperatorInput>;
  twitter_title: InputMaybe<StringQueryOperatorInput>;
  updated_at: InputMaybe<DateQueryOperatorInput>;
  url: InputMaybe<StringQueryOperatorInput>;
  uuid: InputMaybe<StringQueryOperatorInput>;
  visibility: InputMaybe<StringQueryOperatorInput>;
};


type Query_ghostPostArgs = {
  access: InputMaybe<BooleanQueryOperatorInput>;
  authors: InputMaybe<GhostAuthorFilterListInput>;
  canonical_url: InputMaybe<StringQueryOperatorInput>;
  children: InputMaybe<NodeFilterListInput>;
  codeinjection_foot: InputMaybe<StringQueryOperatorInput>;
  codeinjection_head: InputMaybe<StringQueryOperatorInput>;
  codeinjection_styles: InputMaybe<StringQueryOperatorInput>;
  comment_id: InputMaybe<StringQueryOperatorInput>;
  created_at: InputMaybe<DateQueryOperatorInput>;
  custom_excerpt: InputMaybe<StringQueryOperatorInput>;
  custom_template: InputMaybe<StringQueryOperatorInput>;
  email_recipient_filter: InputMaybe<StringQueryOperatorInput>;
  email_subject: InputMaybe<StringQueryOperatorInput>;
  excerpt: InputMaybe<StringQueryOperatorInput>;
  feature_image: InputMaybe<StringQueryOperatorInput>;
  featured: InputMaybe<BooleanQueryOperatorInput>;
  ghostId: InputMaybe<StringQueryOperatorInput>;
  html: InputMaybe<StringQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  meta_description: InputMaybe<StringQueryOperatorInput>;
  meta_title: InputMaybe<StringQueryOperatorInput>;
  og_description: InputMaybe<StringQueryOperatorInput>;
  og_image: InputMaybe<StringQueryOperatorInput>;
  og_title: InputMaybe<StringQueryOperatorInput>;
  page: InputMaybe<BooleanQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  plaintext: InputMaybe<StringQueryOperatorInput>;
  primary_author: InputMaybe<GhostAuthorFilterInput>;
  primary_tag: InputMaybe<GhostTagFilterInput>;
  published_at: InputMaybe<DateQueryOperatorInput>;
  reading_time: InputMaybe<IntQueryOperatorInput>;
  send_email_when_published: InputMaybe<BooleanQueryOperatorInput>;
  slug: InputMaybe<StringQueryOperatorInput>;
  tags: InputMaybe<GhostTagFilterListInput>;
  title: InputMaybe<StringQueryOperatorInput>;
  twitter_description: InputMaybe<StringQueryOperatorInput>;
  twitter_image: InputMaybe<StringQueryOperatorInput>;
  twitter_title: InputMaybe<StringQueryOperatorInput>;
  updated_at: InputMaybe<DateQueryOperatorInput>;
  url: InputMaybe<StringQueryOperatorInput>;
  uuid: InputMaybe<StringQueryOperatorInput>;
  visibility: InputMaybe<StringQueryOperatorInput>;
};


type Query_ghostSettingsArgs = {
  active_timezone: InputMaybe<StringQueryOperatorInput>;
  children: InputMaybe<NodeFilterListInput>;
  codeinjection_foot: InputMaybe<StringQueryOperatorInput>;
  codeinjection_head: InputMaybe<StringQueryOperatorInput>;
  codeinjection_styles: InputMaybe<StringQueryOperatorInput>;
  cover_image: InputMaybe<StringQueryOperatorInput>;
  default_locale: InputMaybe<StringQueryOperatorInput>;
  description: InputMaybe<StringQueryOperatorInput>;
  facebook: InputMaybe<StringQueryOperatorInput>;
  ghostId: InputMaybe<IntQueryOperatorInput>;
  icon: InputMaybe<StringQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  lang: InputMaybe<StringQueryOperatorInput>;
  logo: InputMaybe<StringQueryOperatorInput>;
  members_support_address: InputMaybe<StringQueryOperatorInput>;
  meta_description: InputMaybe<StringQueryOperatorInput>;
  meta_title: InputMaybe<StringQueryOperatorInput>;
  navigation: InputMaybe<GhostNavigationFilterListInput>;
  og_description: InputMaybe<StringQueryOperatorInput>;
  og_image: InputMaybe<StringQueryOperatorInput>;
  og_title: InputMaybe<StringQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  secondary_navigation: InputMaybe<GhostNavigationFilterListInput>;
  timezone: InputMaybe<StringQueryOperatorInput>;
  title: InputMaybe<StringQueryOperatorInput>;
  twitter: InputMaybe<StringQueryOperatorInput>;
  twitter_description: InputMaybe<StringQueryOperatorInput>;
  twitter_image: InputMaybe<StringQueryOperatorInput>;
  twitter_title: InputMaybe<StringQueryOperatorInput>;
  url: InputMaybe<StringQueryOperatorInput>;
};


type Query_ghostTagArgs = {
  accent_color: InputMaybe<StringQueryOperatorInput>;
  canonical_url: InputMaybe<StringQueryOperatorInput>;
  children: InputMaybe<NodeFilterListInput>;
  codeinjection_foot: InputMaybe<StringQueryOperatorInput>;
  codeinjection_head: InputMaybe<StringQueryOperatorInput>;
  count: InputMaybe<GhostPostCountFilterInput>;
  description: InputMaybe<StringQueryOperatorInput>;
  feature_image: InputMaybe<StringQueryOperatorInput>;
  ghostId: InputMaybe<StringQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  meta_description: InputMaybe<StringQueryOperatorInput>;
  meta_title: InputMaybe<StringQueryOperatorInput>;
  name: InputMaybe<StringQueryOperatorInput>;
  og_description: InputMaybe<StringQueryOperatorInput>;
  og_image: InputMaybe<StringQueryOperatorInput>;
  og_title: InputMaybe<StringQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  postCount: InputMaybe<IntQueryOperatorInput>;
  slug: InputMaybe<StringQueryOperatorInput>;
  twitter_description: InputMaybe<StringQueryOperatorInput>;
  twitter_image: InputMaybe<StringQueryOperatorInput>;
  twitter_title: InputMaybe<StringQueryOperatorInput>;
  url: InputMaybe<StringQueryOperatorInput>;
  visibility: InputMaybe<StringQueryOperatorInput>;
};


type Query_siteArgs = {
  buildTime: InputMaybe<DateQueryOperatorInput>;
  children: InputMaybe<NodeFilterListInput>;
  graphqlTypegen: InputMaybe<SiteGraphqlTypegenFilterInput>;
  host: InputMaybe<StringQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  jsxRuntime: InputMaybe<StringQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  pathPrefix: InputMaybe<StringQueryOperatorInput>;
  polyfill: InputMaybe<BooleanQueryOperatorInput>;
  port: InputMaybe<IntQueryOperatorInput>;
  siteMetadata: InputMaybe<SiteSiteMetadataFilterInput>;
  trailingSlash: InputMaybe<StringQueryOperatorInput>;
};


type Query_siteBuildMetadataArgs = {
  buildTime: InputMaybe<DateQueryOperatorInput>;
  children: InputMaybe<NodeFilterListInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  parent: InputMaybe<NodeFilterInput>;
};


type Query_siteFunctionArgs = {
  absoluteCompiledFilePath: InputMaybe<StringQueryOperatorInput>;
  children: InputMaybe<NodeFilterListInput>;
  functionRoute: InputMaybe<StringQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  matchPath: InputMaybe<StringQueryOperatorInput>;
  originalAbsoluteFilePath: InputMaybe<StringQueryOperatorInput>;
  originalRelativeFilePath: InputMaybe<StringQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  pluginName: InputMaybe<StringQueryOperatorInput>;
  relativeCompiledFilePath: InputMaybe<StringQueryOperatorInput>;
};


type Query_sitePageArgs = {
  children: InputMaybe<NodeFilterListInput>;
  component: InputMaybe<StringQueryOperatorInput>;
  componentChunkName: InputMaybe<StringQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  internalComponentName: InputMaybe<StringQueryOperatorInput>;
  matchPath: InputMaybe<StringQueryOperatorInput>;
  pageContext: InputMaybe<JSONQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  path: InputMaybe<StringQueryOperatorInput>;
  pluginCreator: InputMaybe<SitePluginFilterInput>;
};


type Query_sitePluginArgs = {
  browserAPIs: InputMaybe<StringQueryOperatorInput>;
  children: InputMaybe<NodeFilterListInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  name: InputMaybe<StringQueryOperatorInput>;
  nodeAPIs: InputMaybe<StringQueryOperatorInput>;
  packageJson: InputMaybe<JSONQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  pluginFilepath: InputMaybe<StringQueryOperatorInput>;
  pluginOptions: InputMaybe<JSONQueryOperatorInput>;
  resolve: InputMaybe<StringQueryOperatorInput>;
  ssrAPIs: InputMaybe<StringQueryOperatorInput>;
  version: InputMaybe<StringQueryOperatorInput>;
};

type Site = Node & {
  readonly buildTime: Maybe<Scalars['Date']>;
  readonly children: ReadonlyArray<Node>;
  readonly graphqlTypegen: Maybe<SiteGraphqlTypegen>;
  readonly host: Maybe<Scalars['String']>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly jsxRuntime: Maybe<Scalars['String']>;
  readonly parent: Maybe<Node>;
  readonly pathPrefix: Maybe<Scalars['String']>;
  readonly polyfill: Maybe<Scalars['Boolean']>;
  readonly port: Maybe<Scalars['Int']>;
  readonly siteMetadata: Maybe<SiteSiteMetadata>;
  readonly trailingSlash: Maybe<Scalars['String']>;
};


type Site_buildTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type SiteBuildMetadata = Node & {
  readonly buildTime: Maybe<Scalars['Date']>;
  readonly children: ReadonlyArray<Node>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly parent: Maybe<Node>;
};


type SiteBuildMetadata_buildTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type SiteBuildMetadataConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SiteBuildMetadataEdge>;
  readonly group: ReadonlyArray<SiteBuildMetadataGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<SiteBuildMetadata>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SiteBuildMetadataConnection_distinctArgs = {
  field: SiteBuildMetadataFieldSelector;
};


type SiteBuildMetadataConnection_groupArgs = {
  field: SiteBuildMetadataFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SiteBuildMetadataConnection_maxArgs = {
  field: SiteBuildMetadataFieldSelector;
};


type SiteBuildMetadataConnection_minArgs = {
  field: SiteBuildMetadataFieldSelector;
};


type SiteBuildMetadataConnection_sumArgs = {
  field: SiteBuildMetadataFieldSelector;
};

type SiteBuildMetadataEdge = {
  readonly next: Maybe<SiteBuildMetadata>;
  readonly node: SiteBuildMetadata;
  readonly previous: Maybe<SiteBuildMetadata>;
};

type SiteBuildMetadataFieldSelector = {
  readonly buildTime: InputMaybe<FieldSelectorEnum>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly parent: InputMaybe<NodeFieldSelector>;
};

type SiteBuildMetadataFilterInput = {
  readonly buildTime: InputMaybe<DateQueryOperatorInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
};

type SiteBuildMetadataGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SiteBuildMetadataEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<SiteBuildMetadataGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<SiteBuildMetadata>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SiteBuildMetadataGroupConnection_distinctArgs = {
  field: SiteBuildMetadataFieldSelector;
};


type SiteBuildMetadataGroupConnection_groupArgs = {
  field: SiteBuildMetadataFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SiteBuildMetadataGroupConnection_maxArgs = {
  field: SiteBuildMetadataFieldSelector;
};


type SiteBuildMetadataGroupConnection_minArgs = {
  field: SiteBuildMetadataFieldSelector;
};


type SiteBuildMetadataGroupConnection_sumArgs = {
  field: SiteBuildMetadataFieldSelector;
};

type SiteBuildMetadataSortInput = {
  readonly buildTime: InputMaybe<SortOrderEnum>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly parent: InputMaybe<NodeSortInput>;
};

type SiteConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SiteEdge>;
  readonly group: ReadonlyArray<SiteGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<Site>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SiteConnection_distinctArgs = {
  field: SiteFieldSelector;
};


type SiteConnection_groupArgs = {
  field: SiteFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SiteConnection_maxArgs = {
  field: SiteFieldSelector;
};


type SiteConnection_minArgs = {
  field: SiteFieldSelector;
};


type SiteConnection_sumArgs = {
  field: SiteFieldSelector;
};

type SiteEdge = {
  readonly next: Maybe<Site>;
  readonly node: Site;
  readonly previous: Maybe<Site>;
};

type SiteFieldSelector = {
  readonly buildTime: InputMaybe<FieldSelectorEnum>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly graphqlTypegen: InputMaybe<SiteGraphqlTypegenFieldSelector>;
  readonly host: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly jsxRuntime: InputMaybe<FieldSelectorEnum>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly pathPrefix: InputMaybe<FieldSelectorEnum>;
  readonly polyfill: InputMaybe<FieldSelectorEnum>;
  readonly port: InputMaybe<FieldSelectorEnum>;
  readonly siteMetadata: InputMaybe<SiteSiteMetadataFieldSelector>;
  readonly trailingSlash: InputMaybe<FieldSelectorEnum>;
};

type SiteFilterInput = {
  readonly buildTime: InputMaybe<DateQueryOperatorInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly graphqlTypegen: InputMaybe<SiteGraphqlTypegenFilterInput>;
  readonly host: InputMaybe<StringQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly jsxRuntime: InputMaybe<StringQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly pathPrefix: InputMaybe<StringQueryOperatorInput>;
  readonly polyfill: InputMaybe<BooleanQueryOperatorInput>;
  readonly port: InputMaybe<IntQueryOperatorInput>;
  readonly siteMetadata: InputMaybe<SiteSiteMetadataFilterInput>;
  readonly trailingSlash: InputMaybe<StringQueryOperatorInput>;
};

type SiteFunction = Node & {
  readonly absoluteCompiledFilePath: Scalars['String'];
  readonly children: ReadonlyArray<Node>;
  readonly functionRoute: Scalars['String'];
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly matchPath: Maybe<Scalars['String']>;
  readonly originalAbsoluteFilePath: Scalars['String'];
  readonly originalRelativeFilePath: Scalars['String'];
  readonly parent: Maybe<Node>;
  readonly pluginName: Scalars['String'];
  readonly relativeCompiledFilePath: Scalars['String'];
};

type SiteFunctionConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SiteFunctionEdge>;
  readonly group: ReadonlyArray<SiteFunctionGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<SiteFunction>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SiteFunctionConnection_distinctArgs = {
  field: SiteFunctionFieldSelector;
};


type SiteFunctionConnection_groupArgs = {
  field: SiteFunctionFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SiteFunctionConnection_maxArgs = {
  field: SiteFunctionFieldSelector;
};


type SiteFunctionConnection_minArgs = {
  field: SiteFunctionFieldSelector;
};


type SiteFunctionConnection_sumArgs = {
  field: SiteFunctionFieldSelector;
};

type SiteFunctionEdge = {
  readonly next: Maybe<SiteFunction>;
  readonly node: SiteFunction;
  readonly previous: Maybe<SiteFunction>;
};

type SiteFunctionFieldSelector = {
  readonly absoluteCompiledFilePath: InputMaybe<FieldSelectorEnum>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly functionRoute: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly matchPath: InputMaybe<FieldSelectorEnum>;
  readonly originalAbsoluteFilePath: InputMaybe<FieldSelectorEnum>;
  readonly originalRelativeFilePath: InputMaybe<FieldSelectorEnum>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly pluginName: InputMaybe<FieldSelectorEnum>;
  readonly relativeCompiledFilePath: InputMaybe<FieldSelectorEnum>;
};

type SiteFunctionFilterInput = {
  readonly absoluteCompiledFilePath: InputMaybe<StringQueryOperatorInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly functionRoute: InputMaybe<StringQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly matchPath: InputMaybe<StringQueryOperatorInput>;
  readonly originalAbsoluteFilePath: InputMaybe<StringQueryOperatorInput>;
  readonly originalRelativeFilePath: InputMaybe<StringQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly pluginName: InputMaybe<StringQueryOperatorInput>;
  readonly relativeCompiledFilePath: InputMaybe<StringQueryOperatorInput>;
};

type SiteFunctionGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SiteFunctionEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<SiteFunctionGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<SiteFunction>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SiteFunctionGroupConnection_distinctArgs = {
  field: SiteFunctionFieldSelector;
};


type SiteFunctionGroupConnection_groupArgs = {
  field: SiteFunctionFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SiteFunctionGroupConnection_maxArgs = {
  field: SiteFunctionFieldSelector;
};


type SiteFunctionGroupConnection_minArgs = {
  field: SiteFunctionFieldSelector;
};


type SiteFunctionGroupConnection_sumArgs = {
  field: SiteFunctionFieldSelector;
};

type SiteFunctionSortInput = {
  readonly absoluteCompiledFilePath: InputMaybe<SortOrderEnum>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly functionRoute: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly matchPath: InputMaybe<SortOrderEnum>;
  readonly originalAbsoluteFilePath: InputMaybe<SortOrderEnum>;
  readonly originalRelativeFilePath: InputMaybe<SortOrderEnum>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly pluginName: InputMaybe<SortOrderEnum>;
  readonly relativeCompiledFilePath: InputMaybe<SortOrderEnum>;
};

type SiteGraphqlTypegen = {
  readonly documentSearchPaths: Maybe<ReadonlyArray<Maybe<Scalars['String']>>>;
  readonly generateOnBuild: Maybe<Scalars['Boolean']>;
  readonly typesOutputPath: Maybe<Scalars['String']>;
};

type SiteGraphqlTypegenFieldSelector = {
  readonly documentSearchPaths: InputMaybe<FieldSelectorEnum>;
  readonly generateOnBuild: InputMaybe<FieldSelectorEnum>;
  readonly typesOutputPath: InputMaybe<FieldSelectorEnum>;
};

type SiteGraphqlTypegenFilterInput = {
  readonly documentSearchPaths: InputMaybe<StringQueryOperatorInput>;
  readonly generateOnBuild: InputMaybe<BooleanQueryOperatorInput>;
  readonly typesOutputPath: InputMaybe<StringQueryOperatorInput>;
};

type SiteGraphqlTypegenSortInput = {
  readonly documentSearchPaths: InputMaybe<SortOrderEnum>;
  readonly generateOnBuild: InputMaybe<SortOrderEnum>;
  readonly typesOutputPath: InputMaybe<SortOrderEnum>;
};

type SiteGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SiteEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<SiteGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<Site>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SiteGroupConnection_distinctArgs = {
  field: SiteFieldSelector;
};


type SiteGroupConnection_groupArgs = {
  field: SiteFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SiteGroupConnection_maxArgs = {
  field: SiteFieldSelector;
};


type SiteGroupConnection_minArgs = {
  field: SiteFieldSelector;
};


type SiteGroupConnection_sumArgs = {
  field: SiteFieldSelector;
};

type SitePage = Node & {
  readonly children: ReadonlyArray<Node>;
  readonly component: Scalars['String'];
  readonly componentChunkName: Scalars['String'];
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly internalComponentName: Scalars['String'];
  readonly matchPath: Maybe<Scalars['String']>;
  readonly pageContext: Maybe<Scalars['JSON']>;
  readonly parent: Maybe<Node>;
  readonly path: Scalars['String'];
  readonly pluginCreator: Maybe<SitePlugin>;
};

type SitePageConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SitePageEdge>;
  readonly group: ReadonlyArray<SitePageGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<SitePage>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SitePageConnection_distinctArgs = {
  field: SitePageFieldSelector;
};


type SitePageConnection_groupArgs = {
  field: SitePageFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SitePageConnection_maxArgs = {
  field: SitePageFieldSelector;
};


type SitePageConnection_minArgs = {
  field: SitePageFieldSelector;
};


type SitePageConnection_sumArgs = {
  field: SitePageFieldSelector;
};

type SitePageEdge = {
  readonly next: Maybe<SitePage>;
  readonly node: SitePage;
  readonly previous: Maybe<SitePage>;
};

type SitePageFieldSelector = {
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly component: InputMaybe<FieldSelectorEnum>;
  readonly componentChunkName: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly internalComponentName: InputMaybe<FieldSelectorEnum>;
  readonly matchPath: InputMaybe<FieldSelectorEnum>;
  readonly pageContext: InputMaybe<FieldSelectorEnum>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly path: InputMaybe<FieldSelectorEnum>;
  readonly pluginCreator: InputMaybe<SitePluginFieldSelector>;
};

type SitePageFilterInput = {
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly component: InputMaybe<StringQueryOperatorInput>;
  readonly componentChunkName: InputMaybe<StringQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly internalComponentName: InputMaybe<StringQueryOperatorInput>;
  readonly matchPath: InputMaybe<StringQueryOperatorInput>;
  readonly pageContext: InputMaybe<JSONQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly path: InputMaybe<StringQueryOperatorInput>;
  readonly pluginCreator: InputMaybe<SitePluginFilterInput>;
};

type SitePageGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SitePageEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<SitePageGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<SitePage>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SitePageGroupConnection_distinctArgs = {
  field: SitePageFieldSelector;
};


type SitePageGroupConnection_groupArgs = {
  field: SitePageFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SitePageGroupConnection_maxArgs = {
  field: SitePageFieldSelector;
};


type SitePageGroupConnection_minArgs = {
  field: SitePageFieldSelector;
};


type SitePageGroupConnection_sumArgs = {
  field: SitePageFieldSelector;
};

type SitePageSortInput = {
  readonly children: InputMaybe<NodeSortInput>;
  readonly component: InputMaybe<SortOrderEnum>;
  readonly componentChunkName: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly internalComponentName: InputMaybe<SortOrderEnum>;
  readonly matchPath: InputMaybe<SortOrderEnum>;
  readonly pageContext: InputMaybe<SortOrderEnum>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly path: InputMaybe<SortOrderEnum>;
  readonly pluginCreator: InputMaybe<SitePluginSortInput>;
};

type SitePlugin = Node & {
  readonly browserAPIs: Maybe<ReadonlyArray<Maybe<Scalars['String']>>>;
  readonly children: ReadonlyArray<Node>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly name: Maybe<Scalars['String']>;
  readonly nodeAPIs: Maybe<ReadonlyArray<Maybe<Scalars['String']>>>;
  readonly packageJson: Maybe<Scalars['JSON']>;
  readonly parent: Maybe<Node>;
  readonly pluginFilepath: Maybe<Scalars['String']>;
  readonly pluginOptions: Maybe<Scalars['JSON']>;
  readonly resolve: Maybe<Scalars['String']>;
  readonly ssrAPIs: Maybe<ReadonlyArray<Maybe<Scalars['String']>>>;
  readonly version: Maybe<Scalars['String']>;
};

type SitePluginConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SitePluginEdge>;
  readonly group: ReadonlyArray<SitePluginGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<SitePlugin>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SitePluginConnection_distinctArgs = {
  field: SitePluginFieldSelector;
};


type SitePluginConnection_groupArgs = {
  field: SitePluginFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SitePluginConnection_maxArgs = {
  field: SitePluginFieldSelector;
};


type SitePluginConnection_minArgs = {
  field: SitePluginFieldSelector;
};


type SitePluginConnection_sumArgs = {
  field: SitePluginFieldSelector;
};

type SitePluginEdge = {
  readonly next: Maybe<SitePlugin>;
  readonly node: SitePlugin;
  readonly previous: Maybe<SitePlugin>;
};

type SitePluginFieldSelector = {
  readonly browserAPIs: InputMaybe<FieldSelectorEnum>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly name: InputMaybe<FieldSelectorEnum>;
  readonly nodeAPIs: InputMaybe<FieldSelectorEnum>;
  readonly packageJson: InputMaybe<FieldSelectorEnum>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly pluginFilepath: InputMaybe<FieldSelectorEnum>;
  readonly pluginOptions: InputMaybe<FieldSelectorEnum>;
  readonly resolve: InputMaybe<FieldSelectorEnum>;
  readonly ssrAPIs: InputMaybe<FieldSelectorEnum>;
  readonly version: InputMaybe<FieldSelectorEnum>;
};

type SitePluginFilterInput = {
  readonly browserAPIs: InputMaybe<StringQueryOperatorInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly name: InputMaybe<StringQueryOperatorInput>;
  readonly nodeAPIs: InputMaybe<StringQueryOperatorInput>;
  readonly packageJson: InputMaybe<JSONQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly pluginFilepath: InputMaybe<StringQueryOperatorInput>;
  readonly pluginOptions: InputMaybe<JSONQueryOperatorInput>;
  readonly resolve: InputMaybe<StringQueryOperatorInput>;
  readonly ssrAPIs: InputMaybe<StringQueryOperatorInput>;
  readonly version: InputMaybe<StringQueryOperatorInput>;
};

type SitePluginGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SitePluginEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<SitePluginGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<SitePlugin>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SitePluginGroupConnection_distinctArgs = {
  field: SitePluginFieldSelector;
};


type SitePluginGroupConnection_groupArgs = {
  field: SitePluginFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SitePluginGroupConnection_maxArgs = {
  field: SitePluginFieldSelector;
};


type SitePluginGroupConnection_minArgs = {
  field: SitePluginFieldSelector;
};


type SitePluginGroupConnection_sumArgs = {
  field: SitePluginFieldSelector;
};

type SitePluginSortInput = {
  readonly browserAPIs: InputMaybe<SortOrderEnum>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly name: InputMaybe<SortOrderEnum>;
  readonly nodeAPIs: InputMaybe<SortOrderEnum>;
  readonly packageJson: InputMaybe<SortOrderEnum>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly pluginFilepath: InputMaybe<SortOrderEnum>;
  readonly pluginOptions: InputMaybe<SortOrderEnum>;
  readonly resolve: InputMaybe<SortOrderEnum>;
  readonly ssrAPIs: InputMaybe<SortOrderEnum>;
  readonly version: InputMaybe<SortOrderEnum>;
};

type SiteSiteMetadata = {
  readonly description: Maybe<Scalars['String']>;
  readonly siteUrl: Maybe<Scalars['String']>;
  readonly title: Maybe<Scalars['String']>;
};

type SiteSiteMetadataFieldSelector = {
  readonly description: InputMaybe<FieldSelectorEnum>;
  readonly siteUrl: InputMaybe<FieldSelectorEnum>;
  readonly title: InputMaybe<FieldSelectorEnum>;
};

type SiteSiteMetadataFilterInput = {
  readonly description: InputMaybe<StringQueryOperatorInput>;
  readonly siteUrl: InputMaybe<StringQueryOperatorInput>;
  readonly title: InputMaybe<StringQueryOperatorInput>;
};

type SiteSiteMetadataSortInput = {
  readonly description: InputMaybe<SortOrderEnum>;
  readonly siteUrl: InputMaybe<SortOrderEnum>;
  readonly title: InputMaybe<SortOrderEnum>;
};

type SiteSortInput = {
  readonly buildTime: InputMaybe<SortOrderEnum>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly graphqlTypegen: InputMaybe<SiteGraphqlTypegenSortInput>;
  readonly host: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly jsxRuntime: InputMaybe<SortOrderEnum>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly pathPrefix: InputMaybe<SortOrderEnum>;
  readonly polyfill: InputMaybe<SortOrderEnum>;
  readonly port: InputMaybe<SortOrderEnum>;
  readonly siteMetadata: InputMaybe<SiteSiteMetadataSortInput>;
  readonly trailingSlash: InputMaybe<SortOrderEnum>;
};

type SortOrderEnum =
  | 'ASC'
  | 'DESC';

type StringQueryOperatorInput = {
  readonly eq: InputMaybe<Scalars['String']>;
  readonly glob: InputMaybe<Scalars['String']>;
  readonly in: InputMaybe<ReadonlyArray<InputMaybe<Scalars['String']>>>;
  readonly ne: InputMaybe<Scalars['String']>;
  readonly nin: InputMaybe<ReadonlyArray<InputMaybe<Scalars['String']>>>;
  readonly regex: InputMaybe<Scalars['String']>;
};

type GhostPageFieldsFragment = { readonly edges: ReadonlyArray<{ readonly node: { readonly title: string, readonly slug: string, readonly feature_image: string | null, readonly excerpt: string | null, readonly html: string | null, readonly meta_description: string | null, readonly meta_title: string | null, readonly og_description: string | null, readonly og_image: string | null, readonly og_title: string | null, readonly published_at: string | null, readonly twitter_description: string | null, readonly twitter_image: string | null, readonly twitter_title: string | null, readonly tags: ReadonlyArray<{ readonly slug: string } | null> | null } }> };

type GhostPageTitlesFragment = { readonly edges: ReadonlyArray<{ readonly node: { readonly title: string, readonly slug: string, readonly tags: ReadonlyArray<{ readonly slug: string } | null> | null } }> };

type GhostPostFieldsFragment = { readonly edges: ReadonlyArray<{ readonly node: { readonly title: string, readonly slug: string, readonly feature_image: string | null, readonly excerpt: string | null, readonly html: string | null, readonly meta_description: string | null, readonly meta_title: string | null, readonly og_description: string | null, readonly og_image: string | null, readonly og_title: string | null, readonly published_at: string | null, readonly twitter_description: string | null, readonly twitter_image: string | null, readonly twitter_title: string | null, readonly tags: ReadonlyArray<{ readonly slug: string } | null> | null } }> };

type GhostPostSummariesFragment = { readonly edges: ReadonlyArray<{ readonly node: { readonly title: string, readonly slug: string, readonly feature_image: string | null, readonly published_at: string | null, readonly tags: ReadonlyArray<{ readonly slug: string } | null> | null } }> };


}
